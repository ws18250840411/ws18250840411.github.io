(self.webpackChunkmooli_mobile=self.webpackChunkmooli_mobile||[]).push([[651],{1616:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},7440:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# ActionSheet 动作面板\n\n### 介绍\n\n底部弹起的模态面板，包含与当前情境相关的多个选项。\n\n## 代码演示\n\n### 基础用法\n\n通过 `description` 可以在菜单顶部显示描述信息，通过选项的 `subname` 属性可以在选项文字的右侧展示描述信息；设置 `cancelText` 属性后，会在底部展示取消按钮，点击后关闭当前面板并触发 `onCancel` 事件；动作面板通过 `actions` 属性来定义选项，`actions` 属性是一个由对象构成的数组，数组中的每个对象配置一列，对象格式见文档下方表格。\n\n```jsx\nimport { ActionSheet, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const actions = [\n    { name: '选项一' },\n    { name: '选项二' },\n    { name: '选项三', subname: '描述信息' },\n  ];\n  const [visible, setVisible] = React.useState(false);\n  const [cancelText, setCancelText] = React.useState(null);\n  const [description, setDescription] = React.useState(null);\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          setCancelText(null);\n          setDescription(null);\n          setVisible(!visible);\n        }}\n      >\n        基础用法\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          setCancelText('取消');\n          setDescription(null);\n          setVisible(!visible);\n        }}\n      >\n        展示取消按钮\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          setCancelText('取消');\n          setDescription('这是一段描述信息');\n          setVisible(!visible);\n        }}\n      >\n        展示描述信息\n      </Cell>\n      <ActionSheet\n        visible={visible}\n        actions={actions}\n        cancelText={cancelText}\n        description={description}\n        onClickMask={() => setVisible(false)}\n        onSelect={({ item, index }) => {\n          console.log(item, index);\n          setVisible(false);\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 选项状态\n\n可以通过 `loading` 和 `disabled` 将选项设置为加载状态或禁用状态，或者通过`color`设置选项的颜色\n\n```jsx\nimport { ActionSheet, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const actions = [\n    { name: '着色选项', color: '#ee0a24' },\n    { name: '禁用选项', disabled: true },\n    { name: '加载选项', loading: true },\n  ];\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          setVisible(!visible);\n        }}\n      >\n        设置选项状态\n      </Cell>\n      <ActionSheet\n        visible={visible}\n        actions={actions}\n        onClickMask={() => setVisible(false)}\n        onSelect={({ item, index }) => {\n          console.log(item, index);\n          setVisible(false);\n        }}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自定义面板\n\n通过插槽可以自定义面板的展示内容，同时可以使用`title`属性展示标题栏\n\n```jsx\nimport { ActionSheet, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          setVisible(!visible);\n        }}\n      >\n        设置选项状态\n      </Cell>\n      <ActionSheet\n        closeable\n        visible={visible}\n        title=\"标题\"\n        onCancel={() => setVisible(false)}\n        onClickMask={() => setVisible(false)}\n        onSelect={({ item, index }) => {\n          console.log(item, index);\n          setVisible(false);\n        }}\n      >\n        <div style={{ padding: '16px 16px 160px' }}>自定义内容</div>\n      </ActionSheet>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| visible | 是否显示动作面板 | _boolean_ | `false` |\n| actions | 面板选项列表 | _Action[]_ | `[]` |\n| title | 顶部标题 | _string_ | - |\n| cancelText | 取消按钮文字 | _string_ | - |\n| description | 选项上方的描述信息 | _string_ | - |\n| closeable | 是否显示关闭图标 | _boolean_ | `true` |\n| closeIcon | 图标名称 | _string_ | `cross` |\n| duration | 动画时长，单位秒 | _number \\| string_ | `0.3` |\n| round | 是否显示圆角 | _boolean_ | `true` |\n| destroy | 隐藏销毁组件 | _boolean_ | `false` |\n| mask | 是否展示遮罩层 | _boolean_ | `true` |\n| lazy | 是否在显示弹层时才渲染节点 | _boolean_ | `true` |\n| lock | 是否锁定背景滚动 | _boolean_ | `true` |\n| beforeClose | 关闭前的回调函数，返回 `false` 可阻止关闭，支持返回 Promise | _(action) => boolean \\| Promise_ | - |\n| transition | popup 动画 | _string_ | - |\n| component | 指定 popup 挂载的节点 | _string \\| Element_ | - |\n| rootComponent | 指定根 root 挂载的节点 | _string \\| Element_ | - |\n| rootClassName | 自定义 root 类名 | _string \\| Array \\| object_ | - |\n| rootStyle | 自定义 root 样式 | _object_ | - |\n| rootProps | root 元素属性 | _object_ | - |\n| maskComponent | 指定 mask 挂载的节点 | _string \\| Element_ | - |\n| maskTransition | mask 动画（如需在动画周期内触发，请定义相关动画函数） | _string_ | - |\n| maskClassName | 自定义遮罩层类名 | _string \\| Array \\| object_ | - |\n| maskStyle | 自定义遮罩层样式 | _object_ | - |\n| maskProps | mask 元素属性（如需监听更多事件，可以在该属性内定义） | _object_ | - |\n\n### Action 数据结构\n\n`actions` 属性是一个由对象构成的数组，数组中的每个对象配置一列，对象可以包含以下值：\n\n| 键名      | 说明                     | 类型                        |\n| --------- | ------------------------ | --------------------------- |\n| name      | 标题                     | _string_                    |\n| subname   | 二级标题                 | _string_                    |\n| color     | 选项文字颜色             | _string_                    |\n| className | 为对应列添加额外的 class | _string \\| Array \\| object_ |\n| loading   | 是否为加载状态           | _boolean_                   |\n| disabled  | 是否为禁用状态           | _boolean_                   |\n| callback  | 点击时触发的回调函数     | _action: Action_            |\n\n### Events\n\n| 事件名 | 说明 | 回调参数 |\n| --- | --- | --- |\n| onSelect | 点击选项时触发，禁用或加载状态下不会触发 | _action: Action, index: number_ |\n| onCancel | 点击取消按钮时触发 | - |\n| onOpen | 打开弹窗时触发 | - |\n| onClose | 关闭弹窗时触发 | - |\n| onOpened | 打开弹窗且动画结束后触发 | - |\n| onClosed | 关闭弹窗且动画结束后触发 | - |\n\n### Slots\n\n| 名称        | 说明                 |\n| ----------- | -------------------- |\n| default     | 自定义面板的展示内容 |\n| description | 自定义描述文案       |\n"},2048:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Button 按钮\n\n### 基本用法英文\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Button } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Button onClick={() => console.log(666666)}>default中文</Button>\n    <Button theme=\"primary\">primary中文</Button>\n  </>,\n  mountNode,\n);\n```\n"},2910:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Button 按钮\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button type="primary">主要按钮</Button>\n    <Button type="info">信息按钮</Button>\n    <Button type="default">默认按钮</Button>\n    <Button type="warning">警告按钮</Button>\n    <Button type="danger">危险按钮</Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 朴素按钮\n\n通过 `plain` 属性将按钮设置为朴素按钮，朴素按钮的文字为按钮颜色，背景为白色。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button plain type="primary">\n      朴素按钮\n    </Button>\n    <Button plain type="info">\n      朴素按钮\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 细边框\n\n设置 `hairline` 属性可以展示 0.5px 的细边框。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button plain hairline type="primary">\n      细边框按钮\n    </Button>\n    <Button plain hairline type="info">\n      细边框按钮\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 禁用状态\n\n通过 `disabled` 属性来禁用按钮，禁用状态下按钮不可点击。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button disabled type="primary">\n      禁用状态\n    </Button>\n    <Button disabled type="info">\n      禁用状态\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 按钮形状\n\n通过 `square` 设置方形按钮，通过 `round` 设置圆形按钮。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button square type="primary">\n      方形按钮\n    </Button>\n    <Button round type="info">\n      圆形按钮\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 加载状态\n\n通过 `loading` 属性设置按钮为加载状态，加载状态下默认会隐藏按钮文字，可以通过 `loadingText` 设置加载状态下的文字。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button loading type="primary" />\n    <Button\n      loading\n      loadingIndicator={\n        <svg className="icon" fill="currentColor" viewBox="0 0 1024 1024">\n          <path\n            d="M832 512c0-176-144-320-320-320V128c211.2 0 384 172.8 384 384h-64zM192 512c0 176 144 320 320 320v64C300.8 896 128 723.2 128 512h64z"\n            p-id="8972"\n          ></path>\n        </svg>\n      }\n      loadingText="自定义指示符"\n      type="primary"\n    />\n    <Button\n      loading\n      loadingType="spinner"\n      type="primary"\n      loadingText="加载中..."\n    />\n    <Button loading loadingType="clockwise" type="info">\n      玩命中...\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 图标按钮\n\n通过 `icon` 属性设置按钮图标，支持 Icon 组件里的所有图标，也可以传入图标 URL。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button icon="plus" type="primary" />\n    <Button icon="plus" type="primary">\n      新增\n    </Button>\n    <Button icon="https://img01.yzcdn.cn/vant/user-active.png" type="default">\n      自定义图标\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 按钮尺寸\n\n支持 `large`、`normal`、`small`、`mini` 四种尺寸，默认为 `normal`。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button size="large" type="info">\n      大号按钮\n    </Button>\n    <Button size="normal" type="info">\n      普通按钮\n    </Button>\n    <Button size="small" type="info">\n      小型按钮\n    </Button>\n    <Button size="mini" type="info">\n      迷你按钮\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 块级元素\n\n按钮在默认情况下为行内块级元素，通过 `block` 属性可以将按钮的元素类型设置为块级元素。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button block type="primary">\n      块级元素\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n### 自定义颜色\n\n通过 `color` 属性可以自定义按钮的颜色。\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-button">\n    <Button color="#7232dd">单色按钮</Button>\n    <Button color="#7232dd" plain>\n      块级元素\n    </Button>\n    <Button color="linear-gradient(to right, #ff6034, #ee0a24)">\n      渐变色按钮\n    </Button>\n  </div>,\n  mountNode,\n);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 类型，可选值为 `primary` `info` `warning` `danger` | _string_ | `default` |\n| size | 尺寸，可选值为 `large` `small` `mini` | _string_ | `normal` |\n| color | 按钮颜色，支持传入 `linear-gradient` 渐变色 | _string_ | - |\n| icon | 图标名称 | _string_ | - |\n| iconSize | 加载图标大小 | _string_ | `16px` |\n| iconPosition | 图标展示位置，可选值为 `right` | _string_ | `left` |\n| block | 是否为块级元素 | _boolean_ | `false` |\n| plain | 是否为朴素按钮 | _boolean_ | `false` |\n| square | 是否为方形按钮 | _boolean_ | `false` |\n| round | 是否为圆形按钮 | _boolean_ | `false` |\n| disabled | 是否禁用按钮 | _boolean_ | `false` |\n| hairline | 是否使用 0.5px 边框 | _boolean_ | `false` |\n| loading | 是否显示为加载状态 | _boolean_ | `false` |\n| loadingText | 加载状态提示文字 | _string_ | - |\n| loadingIndicator | 自定加载指示符 | _string_ | - |\n| loadingType | 加载图标类型 | _string_ | `circular` |\n| loadingSize | 加载图标大小 | _string_ | `20px` |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### Events\n\n| 事件名     | 说明                                     | 回调参数            |\n| ---------- | ---------------------------------------- | ------------------- |\n| click      | 点击按钮，且按钮状态不为加载或禁用时触发 | _event: Event_      |\n| touchstart | 开始触摸按钮时触发                       | _event: TouchEvent_ |\n\n### Slots\n\n| 名称    | 说明     |\n| ------- | -------- |\n| default | 按钮内容 |\n'},7138:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},411:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Cell\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell, CellGroup } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-cell">\n    <Cell title="单元格" value="内容" />\n    <Cell title="单元格" value="内容" label="描述信息" />\n  </div>,\n  mountNode,\n);\n```\n\n### 单元格大小\n\n通过 `size` 属性可以控制单元格的大小。\n\n```jsx\nimport { Cell, CellGroup } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-cell">\n    <Cell title="单元格" size="large" value="内容" />\n    <Cell title="单元格" size="large" value="内容" label="描述信息" />\n  </div>,\n  mountNode,\n);\n```\n\n### 展示图标\n\n通过 `iconLeft` 属性在标题左侧展示图标；`iconRight` 属性定义右侧展示图标。\n\n```jsx\nimport { Cell, CellGroup } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-cell">\n    <Cell title="单元格" iconLeft="location-o" value="内容" />\n    <Cell title="单元格" iconRight="phone-o" value="内容" />\n    <Cell title="单元格" iconLeft="home-o" value="内容" label="描述信息" />\n  </div>,\n  mountNode,\n);\n```\n\n### 展示箭头\n\n设置 `arrow` 属性后会在单元格右侧显示箭头，并且可以通过 `arrowDirection` 属性控制箭头方向。\n\n```jsx\nimport { Cell, CellGroup } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-cell">\n    <Cell title="单元格" arrow value="内容" />\n    <Cell\n      title="单元格"\n      arrow\n      arrowDirection="down"\n      value="内容"\n      label="描述信息"\n    />\n  </div>,\n  mountNode,\n);\n```\n\n### 分组标题\n\n通过 `CellGroup` 的 `title` 属性可以指定分组标题。\n\n```jsx\nimport { Cell, CellGroup } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-cell">\n    <CellGroup title="分组1">\n      <Cell title="单元格" value="内容" />\n    </CellGroup>\n    <CellGroup title="分组2">\n      <Cell title="单元格" value="内容" label="描述信息" />\n    </CellGroup>\n  </div>,\n  mountNode,\n);\n```\n\n### 垂直居中\n\n通过 `center` 属性可以让 `Cell` 的左右内容都垂直居中。\n\n```jsx\nimport { Cell } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-cell">\n    <Cell center title="单元格" value="内容" label="描述信息" />\n  </div>,\n  mountNode,\n);\n```\n\n### 必填星号\n\n通过 `center` 属性可以让 `Cell` 的左右内容都垂直居中。\n\n```jsx\nimport { Cell } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-cell">\n    <Cell required title="单元格" value="内容" label="描述信息" />\n  </div>,\n  mountNode,\n);\n```\n\n## API\n\n### CellGroup Props\n\n| 参数   | 说明           | 类型      | 默认值 |\n| ------ | -------------- | --------- | ------ |\n| title  | 分组标题       | _string_  | `-`    |\n| border | 是否显示外边框 | _boolean_ | `true` |\n\n### Cell Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 左侧标题 | _number \\| string_ | - |\n| value | 右侧内容 | _number \\| string_ | - |\n| label | 标题下方的描述信息 | _string_ | - |\n| size | 单元格大小，可选值为 `large` | _string_ | - |\n| iconLeft | 左侧[图标名称](#/components/icon/zh-CN)或图片链接 | _string_ | - |\n| iconRight | 右侧[图标名称](#/components/icon/zh-CN)或图片链接 | _string_ | - |\n| border | 是否显示内边框 | _boolean_ | `true` |\n| required | 是否显示表单必填星号 | _boolean_ | `false` |\n| center | 是否使内容垂直居中 | _boolean_ | `false` |\n| arrow | 是否显示箭头 | _boolean_ | `false` |\n| arrowDirection | 箭头方向，可选值为 `left` `up` `down` | _string_ | `right` |\n| titleStyle | 左侧标题额外样式 | _any_ | - |\n| titleClass | 左侧标题额外类名 | _any_ | - |\n| valueClass | 右侧内容额外类名 | _any_ | - |\n| labelClass | 描述信息额外类名 | _any_ | - |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### Cell Events\n\n| 事件名           | 说明               | 回调参数       |\n| ---------------- | ------------------ | -------------- |\n| onClick          | 点击单元格时触发   | _event: Event_ |\n| onClickLeftIcon  | 点击左侧图标时触发 | _event: Event_ |\n| onClickRightIcon | 点击右侧图标时触发 | _event: Event_ |\n\n### CellGroup Slots\n\n| 名称    | 说明           |\n| ------- | -------------- |\n| default | 默认插槽       |\n| title   | 自定义分组标题 |\n\n### Cell Slots\n\n| 名称      | 说明                        |\n| --------- | --------------------------- |\n| default   | 自定义右侧 value 的内容     |\n| title     | 自定义左侧 title 的内容     |\n| label     | 自定义标题下方 label 的内容 |\n| iconLeft  | 自定义左侧图标              |\n| iconRight | 自定义右侧图标              |\n'},4627:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},9079:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Dialog 弹出框\n\n### 介绍\n\n弹出模态框，常用于消息提示、消息确认，或在当前页面内完成特定的交互操作。弹出框组件支持函数调用和组件调用两种方式。\n\n## 代码演示\n\n### 组件调用\n\n用于提示一些消息，只包含一个确认按钮。\n\n```jsx\nimport { Dialog, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          setVisible(!visible);\n        }}\n      >\n        基本弹窗\n      </Cell>\n      <Dialog\n        visible={visible}\n        title=\"标题\"\n        destroy={false}\n        onCancel={() => setVisible(false)}\n      >\n        弹窗内容\n      </Dialog>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 函数调用\n\n消息提示用于提示一些消息，只包含一个确认按钮。消息确认用于确认消息，包含取消和确认按钮。\n\n```jsx\nimport { Dialog, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Dialog.alert({\n            title: '标题',\n            message: '弹窗内容',\n          });\n        }}\n      >\n        提示弹窗\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Dialog.alert({\n            message: '弹窗内容',\n          });\n        }}\n      >\n        提示弹窗（无标题）\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Dialog.confirm({\n            title: '标题',\n            message: '弹窗内容',\n          }).then(() => {\n            console.log('promise then');\n          });\n        }}\n      >\n        链式调用\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Dialog.confirm({\n            title: '标题',\n            message: '弹窗内容',\n          });\n          setTimeout(() => {\n            Dialog.close();\n          }, 2000);\n        }}\n      >\n        调用close关闭\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 异步关闭\n\n通过 `beforeClose` 属性可以传入一个回调函数，在弹窗关闭前进行特定操作。\n\n```jsx\nimport { Dialog, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Dialog.confirm({\n            title: '标题',\n            message: '弹窗内容',\n            beforeClose: (action, done) => {\n              if (action === 'onConfirm') {\n                setTimeout(done, 2000);\n              } else {\n                done();\n              }\n            },\n            onConfirm: () => {\n              console.log('点击关闭啦');\n            },\n          });\n        }}\n      >\n        确认弹窗\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### 方法\n\n| 方法名 | 说明 | 参数 | 返回值 |\n| --- | --- | --- | --- |\n| Dialog | 展示弹窗 | _options: DialogOptions_ | `Promise<void>` |\n| Dialog.alert | 展示消息提示弹窗 | _options: DialogOptions_ | `Promise<void>` |\n| Dialog.confirm | 展示消息确认弹窗 | _options: DialogOptions_ | `Promise<void>` |\n| Dialog.setDefaultOptions | 修改默认配置，对所有 Dialog 生效 | _options: DialogOptions_ | `void` |\n| Dialog.resetDefaultOptions | 重置默认配置，对所有 Dialog 生效 | - | `void` |\n| Dialog.close | 关闭弹窗 | - | `void` |\n\n### Props\n\n通过组件调用 `Dialog` 时，支持以下 Props：\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| visible | 是否显示弹窗 | _boolean_ | - |\n| title | 标题 | _string_ | - |\n| width | 弹窗宽度，默认单位为 `px` | _number \\| string_ | `320px` |\n| message | 文本内容，支持通过 `\\n` 换行 | _string \\| () => JSX.ELement_ | - |\n| showConfirmButton | 是否展示确认按钮 | _boolean_ | `true` |\n| showCancelButton | 是否展示取消按钮 | _boolean_ | `false` |\n| confirmButtonText | 确认按钮文案 | _string_ | `确认` |\n| confirmButtonColor | 确认按钮颜色 | _string_ | `#ee0a24` |\n| cancelButtonText | 取消按钮文案 | _string_ | `取消` |\n| cancelButtonColor | 取消按钮颜色 | _string_ | `black` |\n| destroy | 隐藏销毁组件 | _boolean_ | `false` |\n| mask | 是否展示遮罩层 | _boolean_ | `true` |\n| lazy | 是否在显示弹层时才渲染节点 | _boolean_ | `true` |\n| lock | 是否锁定背景滚动 | _boolean_ | `true` |\n| beforeClose | 关闭前的回调函数，返回 `false` 可阻止关闭，支持返回 Promise | _(action) => boolean \\| Promise_ | - |\n| transition | popup 动画 | _string_ | - |\n| component | 指定 popup 挂载的节点 | _string \\| Element_ | - |\n| rootComponent | 指定根 root 挂载的节点 | _string \\| Element_ | - |\n| rootClassName | 自定义 root 类名 | _string \\| Array \\| object_ | - |\n| rootStyle | 自定义 root 样式 | _object_ | - |\n| rootProps | root 元素属性 | _object_ | - |\n| maskComponent | 指定 mask 挂载的节点 | _string \\| Element_ | - |\n| maskTransition | mask 动画（如需在动画周期内触发，请定义相关动画函数） | _string_ | - |\n| maskClassName | 自定义遮罩层类名 | _string \\| Array \\| object_ | - |\n| maskStyle | 自定义遮罩层样式 | _object_ | - |\n| maskProps | mask 元素属性（如需监听更多事件，可以在该属性内定义） | _object_ | - |\n\n### Events\n\n通过组件调用 `Dialog` 时，支持以下事件：\n\n| 事件      | 说明                     | 回调参数 |\n| --------- | ------------------------ | -------- |\n| onConfirm | 点击确认按钮时触发       | -        |\n| onCancel  | 点击取消按钮时触发       | -        |\n| onOpen    | 打开弹窗时触发           | -        |\n| onClose   | 关闭弹窗时触发           | -        |\n| onOpened  | 打开弹窗且动画结束后触发 | -        |\n| onClosed  | 关闭弹窗且动画结束后触发 | -        |\n\n### Slots\n\n通过组件调用 `Dialog` 时，支持以下插槽：\n\n| 名称    | 说明               |\n| ------- | ------------------ |\n| default | 自定义内容         |\n| title   | 自定义标题         |\n| footer  | 自定义底部按钮区域 |\n"},5788:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},8813:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Field 输入框\n\n### 介绍\n\n表单中的输入框组件。\n\n## 代码演示\n\n### 基础用法\n\n可以通过 `value` 绑定输入框的值，通过 `placeholder` 设置占位提示文字。\n\n```jsx\nimport { Field } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        label="文本"\n        placeholder="请输入用户名"\n        onChange={(v) => setValue(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自定义类型\n\n根据 `type` 属性定义不同类型的输入框，默认值为 `text`。\n\n```jsx\nimport { Field } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  const [value1, setValue1] = React.useState(\'\');\n  const [value2, setValue2] = React.useState(\'\');\n  const [value3, setValue3] = React.useState(\'\');\n  const [value4, setValue4] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        label="文本"\n        placeholder="请输入用户名"\n        onChange={(v) => setValue(v)}\n      />\n      <Field\n        value={value1}\n        type="tel"\n        label="手机号"\n        placeholder="请输入手机号"\n        onChange={(v) => setValue1(v)}\n      />\n      <Field\n        value={value2}\n        type="digit"\n        label="整数"\n        placeholder="请输入整数"\n        onChange={(v) => setValue2(v)}\n      />\n      <Field\n        value={value3}\n        type="number"\n        label="数字"\n        placeholder="请输入数字（支持小数）"\n        onChange={(v) => setValue3(v)}\n      />\n      <Field\n        value={value4}\n        type="password"\n        label="密码"\n        placeholder="请输入密码"\n        onChange={(v) => setValue4(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 禁用输入框\n\n通过 `readOnly` 将输入框设置为只读状态，通过 `disabled` 将输入框设置为禁用状态。\n\n```jsx\nimport { Field } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'输入框只读\');\n  const [value1, setValue1] = React.useState(\'输入框已禁用\');\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        label="文本"\n        readOnly\n        placeholder="请输入用户名"\n        onChange={(v) => setValue(v)}\n      />\n      <Field\n        value={value1}\n        label="文本"\n        disabled\n        placeholder="请输入用户名"\n        onChange={(v) => setValue1(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 显示图标\n\n通过 `leftIcon` 和 `rightIcon` 配置输入框两侧的图标，通过设置 `clearable` 在输入过程中展示清除图标。\n\n```jsx\nimport { Field } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  const [value1, setValue1] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        label="文本"\n        placeholder="显示左右图标"\n        leftIcon="smile-o"\n        rightIcon="warning-o"\n        onChange={(v) => setValue(v)}\n      />\n      <Field\n        clearable\n        value={value1}\n        label="文本"\n        placeholder="显示删除图标"\n        leftIcon="music-o"\n        onChange={(v) => setValue1(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 错误提示\n\n设置 `required` 属性表示这是一个必填项，可以配合 `error` 或 `errorMessage` 属性显示对应的错误提示。\n\n```jsx\nimport { Field } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  const [value1, setValue1] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        error\n        required\n        value={value}\n        label="用户名"\n        placeholder="请输入用户名"\n        onChange={(v) => setValue(v)}\n      />\n      <Field\n        required\n        value={value1}\n        label="手机号"\n        placeholder="请输入手机号"\n        errorMessage="手机号格式错误"\n        onChange={(v) => setValue1(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 插入按钮\n\n通过 children 插槽可以在输入框尾部插入按钮。\n\n```jsx\nimport { Field, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        clearable\n        value={value}\n        label="短信验证码"\n        placeholder="请输入"\n        onChange={(v) => setValue(v)}\n      >\n        <Button size="small" type="primary">\n          发送验证码\n        </Button>\n      </Field>\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 格式化输入内容\n\n通过 `formatter` 属性可以对输入的内容进行格式化，通过 `formatTrigger` 属性可以指定执行格式化的时机，默认在输入时进行格式化。\n\n```jsx\nimport { Field, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  const [value1, setValue1] = React.useState(\'\');\n  const formatter = (value) => {\n    // 过滤输入的数字\n    return value.replace(/\\d/g, \'\');\n  };\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        label="文本"\n        placeholder="在输入时执行格式化"\n        formatter={formatter}\n        onChange={(v) => setValue(v)}\n      />\n      <Field\n        value={value1}\n        label="文本"\n        placeholder="在失焦时执行格式化"\n        formatter={formatter}\n        formatTrigger="onBlur"\n        onChange={(v) => setValue1(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 高度自适应\n\n对于 textarea，可以通过 `autoSize` 属性设置高度自适应。\n\n```jsx\nimport { Field, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        type="textarea"\n        rows="1"\n        autoSize\n        label="留言"\n        placeholder="请输入留言"\n        onChange={(v) => setValue(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 显示字数统计\n\n设置 `maxLength` 和 `limit` 属性后会在底部显示字数统计。\n\n```jsx\nimport { Field, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        type="textarea"\n        rows="2"\n        maxLength="50"\n        limit\n        autoSize\n        label="留言"\n        placeholder="请输入留言"\n        onChange={(v) => setValue(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 文本对齐方式\n\n通过 `inputAlign` 属性可以设置输入框内容的对齐方式，可选值为 `center`、`right`。\n\n```jsx\nimport { Field } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [value, setValue] = React.useState(\'\');\n  return (\n    <div className="demo-field">\n      <Field\n        value={value}\n        label="文本"\n        placeholder="内容"\n        labelAlign="left"\n        inputAlign="left"\n        onChange={(v) => setValue(v)}\n      />\n      <Field\n        value={value}\n        label="文本"\n        placeholder="内容"\n        labelAlign="center"\n        inputAlign="center"\n        onChange={(v) => setValue(v)}\n      />\n      <Field\n        value={value}\n        label="文本"\n        placeholder="内容"\n        labelAlign="right"\n        inputAlign="right"\n        onChange={(v) => setValue(v)}\n      />\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| value | 当前输入的值 | _number \\| string_ | - |\n| label | 输入框左侧文本 | _string_ | - |\n| name | 名称，提交表单的标识符 | _string_ | - |\n| type | 输入框类型, 可选值为 `tel` `digit`<br>`number` `textarea` `password` 等 | _string_ | `text` |\n| size | 大小，可选值为 `large` | _string_ | - |\n| maxlength | 输入的最大字符数 | _number \\| string_ | - |\n| placeholder | 输入框占位提示文字 | _string_ | - |\n| border | 是否显示内边框 | _boolean_ | `true` |\n| disabled | 是否禁用输入框 | _boolean_ | `false` |\n| readOnly | 是否只读 | _boolean_ | `false` |\n| colon | 是否在 label 后面添加冒号 | _boolean_ | `false` |\n| required | 是否显示表单必填星号 | _boolean_ | `false` |\n| center | 是否使内容垂直居中 | _boolean_ | `false` |\n| clearable | 是否启用清除图标，点击清除图标后会清空输入框 | _boolean_ | `false` |\n| clickable | 是否开启点击反馈 | _boolean_ | `false` |\n| limit | 是否显示字数统计，需要设置`maxlength`属性 | _boolean_ | `false` |\n| error | 是否将输入内容标红 | _boolean_ | `false` |\n| errorMessage | 底部错误提示文案，为空时不展示 | _string_ | - |\n| formatter | 输入内容格式化函数 | _Function_ | - |\n| formatTrigger | 格式化函数触发的时机，可选值为 `onBlur` | _string_ | `onChange` |\n| arrowDirection | 箭头方向，可选值为 `left` `up` `down` | _string_ | `right` |\n| labelClass | 左侧文本额外类名 | _any_ | - |\n| labelWidth | 左侧文本宽度，默认单位为`px` | _number \\| string_ | `6.2em` |\n| labelAlign | 左侧文本对齐方式，可选值为 `center` `right` | _string_ | `left` |\n| inputAlign | 输入框对齐方式，可选值为 `center` `right` | _string_ | `left` |\n| errorMessageAlign | 错误提示文案对齐方式，可选值为 `center` `right` | _string_ | `left` |\n| autoSize | 是否自适应内容高度，只对 textarea 有效，<br>可传入对象,如 { maxHeight: 100, minHeight: 50 }，<br>单位为`px` | _boolean \\| object_ | `false` |\n| leftIcon | 左侧[图标名称]或图片链接 | _string_ | - |\n| rightIcon | 右侧[图标名称]或图片链接 | _string_ | - |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### Events\n\n除下列事件外，Field 默认支持 Input 标签所有的原生事件\n\n| 事件             | 说明                 | 回调参数                       |\n| ---------------- | -------------------- | ------------------------------ |\n| onChange         | 输入框内容变化时触发 | _value: string (当前输入的值)_ |\n| onFocus          | 输入框获得焦点时触发 | _event: Event_                 |\n| onBlur           | 输入框失去焦点时触发 | _event: Event_                 |\n| onClear          | 点击清除按钮时触发   | _event: Event_                 |\n| onClick          | 点击 Field 时触发    | _event: Event_                 |\n| onClickInput     | 点击输入区域时触发   | _event: Event_                 |\n| onClickLeftIcon  | 点击左侧图标时触发   | _event: Event_                 |\n| onClickRightIcon | 点击右侧图标时触发   | _event: Event_                 |\n\n### Slots\n\n| 名称   | 说明                 |\n| ------ | -------------------- |\n| button | 自定义输入框尾部按钮 |\n'},1089:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},7775:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Flex 布局\n\n### 介绍\n\nFlex 提供了 `Row` 和 `Col` 两个组件来进行行列布局。\n\n## 代码演示\n\n### 基础用法\n\nFlex 组件提供了 `24列栅格`，通过在 `Col` 上添加 `span` 属性设置列所占的宽度百分比。此外，添加 `offset` 属性可以设置列的偏移宽度，计算方式与 span 相同。\n\n```jsx\nimport { Row, Col } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-col">\n    <Row>\n      <Col span="8">span: 8</Col>\n      <Col span="8">span: 8</Col>\n      <Col span="8">span: 8</Col>\n    </Row>\n    <Row>\n      <Col span="4">span: 4</Col>\n      <Col span="10" offset="4">\n        offset: 4, span: 10\n      </Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n### 设置列元素间距\n\n通过 `gutter` 属性可以设置列元素之间的间距，默认间距为 0。\n\n```jsx\nimport { Row, Col } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-col">\n    <Row gutter="20">\n      <Col span="8">span: 8</Col>\n      <Col span="8">span: 8</Col>\n      <Col span="8">span: 8</Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n### 设置对齐方式\n\n将 `justify` 属性设置为 `start`、`center`、`end`、`space-around`、`space-between`等等属性，便于进行灵活的对齐。设置`wrap`为`false`不换行，默认自动换行。\n\n```jsx\nimport { Row, Col } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-col">\n    <Row wrap={false}>\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n    </Row>\n    <Row justify="center">\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n    </Row>\n    <Row justify="end">\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n    </Row>\n    <Row justify="space-between">\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n    </Row>\n    <Row justify="space-around">\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n      <Col span="6">span: 6</Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n## API\n\n### Row Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| gutter | 列元素之间的间距（单位为 px） | _number \\| string_ | - |\n| wrap | 是否自动换行 | _boolean_ | `true` |\n| justify | Flex 主轴对齐方式，可选值为 `end` `center` <br> `space-around` `space-between` | _string_ | `start` |\n| align | Flex 交叉轴对齐方式，可选值为 `center` `bottom` | _string_ | `top` |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### Col Props\n\n| 参数      | 说明           | 类型               | 默认值 |\n| --------- | -------------- | ------------------ | ------ |\n| span      | 列元素宽度     | _number \\| string_ | -      |\n| offset    | 列元素偏移距离 | _number \\| string_ | -      |\n| className | 附加类名       | _string_           | `--`   |\n| style     | 附加样式       | _objcet_           | `--`   |\n\n### Row Events\n\n| 事件名 | 说明       | 回调参数       |\n| ------ | ---------- | -------------- |\n| click  | 点击时触发 | _event: Event_ |\n\n### Col Events\n\n| 事件名 | 说明       | 回调参数       |\n| ------ | ---------- | -------------- |\n| click  | 点击时触发 | _event: Event_ |\n'},9729:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},5677:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Form 表单\n\n### 介绍\n\n用于数据录入、校验，支持输入框、单选框、复选框、文件上传等类型。\n\n## 代码演示\n\n### 基础用法\n\n在表单中，使用 FormItem 的 `rules` 属性定义校验规则。\n\n```jsx\nimport { Form, FormItem, Field, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const form = React.useRef();\n  const [username, setUsername] = React.useState(\'\');\n  const [password, setPassword] = React.useState(\'\');\n  const [value, setValue] = React.useState(\'\');\n  const onSubmit = (values) => {\n    console.log(\'submit\', values);\n  };\n\n  React.useEffect(() => {\n    console.log(form); // 通过red获取到form表单，可以调用内置scrollToField方法等\n  }, []);\n\n  return (\n    <div className="demo-form">\n      <Form onSubmit={onSubmit} ref={form}>\n        <FormItem\n          name="username"\n          rules={[{ required: true, message: \'请填写用户名\' }]}\n        >\n          <Field label="用户名" placeholder="用户名" />\n        </FormItem>\n        <FormItem\n          name="password"\n          rules={[{ required: true, message: \'请填写密码\' }]}\n        >\n          <Field type="password" label="密码" placeholder="请输入密码" />\n        </FormItem>\n        <Button\n          className="demo-form-button"\n          round\n          block\n          type="info"\n          htmlType="submit"\n        >\n          提交\n        </Button>\n      </Form>\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 校验触发方式\n\n在表单中，使用 FormItem 的 `trigger` 属性定义校验方式，可选择有：`change`输入时触发、`blur`失焦时触发、`submit`提交时触发，默认值为`blur`。也可在 Form 组件上通过 `validateTrigger` 属性上定义所有输入框默认触发类型，会被单个子组件触发类型覆盖。\n\n```jsx\nimport { Form, FormItem, Field, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const onSubmit = (values) => {\n    console.log(\'submit\', values);\n  };\n\n  return (\n    <div className="demo-form">\n      <Form onSubmit={onSubmit}>\n        <FormItem\n          name="value1"\n          rules={[\n            {\n              required: true,\n              message: \'请输入test\',\n              trigger: \'change\',\n              validator(val) {\n                return val === \'test\';\n              },\n            },\n          ]}\n        >\n          <Field label="文本" placeholder="内容变化时校验" />\n        </FormItem>\n        <FormItem\n          name="value2"\n          rules={[\n            {\n              required: true,\n              message: \'请输入test\',\n              trigger: \'blur\',\n              validator(val) {\n                return val === \'test\';\n              },\n            },\n          ]}\n        >\n          <Field label="文本" placeholder="失焦时校验" />\n        </FormItem>\n        <FormItem\n          name="value3"\n          rules={[\n            {\n              required: true,\n              message: \'请输入test\',\n              trigger: \'submit\',\n              validator(val) {\n                return val === \'test\';\n              },\n            },\n          ]}\n        >\n          <Field label="文本" placeholder="提交时校验" />\n        </FormItem>\n        <Button\n          className="demo-form-button"\n          round\n          block\n          type="info"\n          htmlType="submit"\n        >\n          提交\n        </Button>\n      </Form>\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 校验规则\n\n通过 `rules` 定义表单校验规则；设置 `validateFirst` 是否从第一个开始校验。\n\n```jsx\nimport { Form, FormItem, Field, Button, Toast } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const onSubmit = (values) => {\n    console.log(\'submit\', values);\n  };\n\n  const onFailed = (errors) => {\n    console.log(\'failed\', errors);\n  };\n\n  return (\n    <div className="demo-form">\n      <Form validateFirst onSubmit={onSubmit} onFailed={onFailed}>\n        <FormItem\n          name="value1"\n          required\n          rules={[\n            {\n              required: true,\n              message: \'请输入六位数字\',\n              pattern: /\\d{6}/,\n              trigger: \'submit\',\n            },\n          ]}\n        >\n          <Field label="标题" placeholder="正则校验" />\n        </FormItem>\n        <FormItem\n          name="value2"\n          rules={[\n            {\n              required: true,\n              message: \'请输入test\',\n              trigger: \'submit\',\n              validator(val) {\n                return val === \'test\';\n              },\n            },\n          ]}\n        >\n          <Field type="password" label="标题" placeholder="函数校验" />\n        </FormItem>\n        <FormItem\n          name="value3"\n          rules={[\n            {\n              required: true,\n              message: \'请输入test\',\n              trigger: \'submit\',\n              validator(val) {\n                return new Promise((resolve) => {\n                  Toast.loading(\'验证中...\');\n                  setTimeout(() => {\n                    Toast.clear();\n                    resolve(val === \'test\');\n                  }, 1000);\n                });\n              },\n            },\n          ]}\n        >\n          <Field type="password" label="标题" placeholder="异步函数校验" />\n        </FormItem>\n        <Button\n          className="demo-form-button"\n          round\n          block\n          type="info"\n          htmlType="submit"\n        >\n          提交\n        </Button>\n      </Form>\n    </div>\n  );\n};\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Form Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| validateTrigger | 表单校验触发时机，可选值为 `change`、`submit`、`blur`，详见下表 | _string_ | `blur` |\n| validateFirst | 是否在某一项校验不通过时停止校验 | _boolean_ | `false` |\n| scrollToError `v2.5.2` | 是否在提交表单且校验不通过时滚动至错误的表单项 | _boolean_ | `false` |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### FormItem Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| labelWidth | 表单项 label 宽度，默认单位为`px` | _number \\| string_ | `6.2em` |\n| labelAlign | \b 表单项 label 对齐方式，可选值为 `center` `right` | _string_ | `left` |\n| inputAlign | 输入框对齐方式，可选值为 `center` `right` | _string_ | `left` |\n| colon | 是否在 label 后面添加冒号 | _boolean_ | `false` |\n| disabled | 是否禁用表单中的所有输入框 | _boolean_ | `false` |\n| readonly | 是否将表单中的所有输入框设置为只读 | _boolean_ | `false` |\n| error | 是否在校验不通过时标红输入框 | _boolean_ | `true` |\n| errorMessage | 是否在校验不通过时在输入框下方展示错误提示 | _boolean_ | `true` |\n| errorMessageAlign | 错误提示文案对齐方式，可选值为 `center` `right` | _string_ | `left` |\n\n### Rule 数据结构\n\n使用 Field 的`rules`属性可以定义校验规则，可选属性如下:\n\n| 键名 | 说明 | 类型 |\n| --- | --- | --- |\n| required | 是否为必选字段 | _boolean_ |\n| message | 错误提示文案 | _string \\| (value, rule) => string_ |\n| validator | 通过函数进行校验 | _(value, rule) => boolean \\| Promise_ |\n| pattern | 通过正则表达式进行校验 | _RegExp_ |\n| trigger | 本项规则的触发时机，可选值为 `change`、`blur`、`submit` | _string_ |\n| formatter | 格式化函数，将表单项的值转换后进行校验 | _(value, rule) => any_ |\n\n### validateTrigger \b 可选值\n\n通过 `validateTrigger` 属性可以自定义表单校验的触发时机。\n\n| 值     | 描述                                 |\n| ------ | ------------------------------------ |\n| submit | 仅在提交表单时触发校验               |\n| blur   | 在提交表单和输入框失焦时触发校验     |\n| change | 在提交表单和输入框内容变化时触发校验 |\n\n### Events\n\n| 事件名 | 说明 | 回调参数 |\n| --- | --- | --- |\n| onSubmit | 提交表单且验证通过后触发 | _values: object_ |\n| onFailed | 提交表单且验证不通过后触发 | _errorInfo: { values: object, errors: object[] }_ |\n\n### 方法\n\n通过 ref 可以获取到 Form 实例并调用实例方法。\n\n| 方法名 | 说明 | 参数 | 返回值 |\n| --- | --- | --- | --- |\n| submit | 提交表单，与点击提交按钮的效果等价 | - | - |\n| validate | 验证表单，支持传入 `name` 来验证单个或部分表单项 | _name?: string \\| string[]_ | _Promise_ |\n| resetValidation | 重置表单项的验证提示，支持传入 `name` 来重置单个或部分表单项 | _name?: string \\| string[]_ | - |\n| scrollToField | 滚动到对应表单项的位置，默认滚动到顶部，第二个参数传 false 可滚动至底部 | _name: string, alignToTop: boolean_ | - |\n\n### Slots\n\n| 名称    | 说明     |\n| ------- | -------- |\n| default | 表单内容 |\n'},391:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},9810:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Grid 宫格\n\n### 介绍\n\n宫格可以在水平方向上把页面分隔成等宽度的区块，用于展示内容或进行页面导航。\n\n## 代码演示\n\n### 基础用法\n\n```jsx\nimport { Grid, GridItem, Icon } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-grid">\n    <Grid>\n      {Array(4)\n        .fill(undefined)\n        .map((i, key) => (\n          <GridItem key={key}>\n            <Icon name="photo-o" />\n            <span>文字</span>\n          </GridItem>\n        ))}\n    </Grid>\n  </div>,\n  mountNode,\n);\n```\n\n### 自定义列数\n\n默认一行展示四个格子，可以通过 `column` 自定义列数。\n\n```jsx\nimport { Grid, GridItem, Icon } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-grid">\n    <Grid column="3">\n      {Array(6)\n        .fill(undefined)\n        .map((i, key) => (\n          <GridItem key={key}>\n            <Icon name="photo-o" />\n            <span>文字</span>\n          </GridItem>\n        ))}\n    </Grid>\n  </div>,\n  mountNode,\n);\n```\n\n### 正方形格子\n\n设置 `square` 属性后，格子的高度会和宽度保持一致。\n\n```jsx\nimport { Grid, GridItem, Icon } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-grid">\n    <Grid square>\n      {Array(3)\n        .fill(undefined)\n        .map((i, key) => (\n          <GridItem key={key}>\n            <Icon name="photo-o" />\n            <span>文字</span>\n          </GridItem>\n        ))}\n    </Grid>\n  </div>,\n  mountNode,\n);\n```\n\n### 格子间距\n\n通过 `gutter` 属性设置格子之间的距离。\n\n```jsx\nimport { Grid, GridItem, Icon } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-grid">\n    <Grid gutter="24">\n      {Array(3)\n        .fill(undefined)\n        .map((i, key) => (\n          <GridItem key={key}>\n            <Icon name="photo-o" />\n            <span>文字</span>\n          </GridItem>\n        ))}\n    </Grid>\n  </div>,\n  mountNode,\n);\n```\n\n### 内容横排\n\n将 `direction` 属性设置为 `horizontal`，可以让宫格的内容呈横向排列。\n\n```jsx\nimport { Grid, GridItem, Icon } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-grid">\n    <Grid direction="horizontal">\n      {Array(3)\n        .fill(undefined)\n        .map((i, key) => (\n          <GridItem key={key}>\n            <Icon name="photo-o" />\n            <span>文字</span>\n          </GridItem>\n        ))}\n    </Grid>\n  </div>,\n  mountNode,\n);\n```\n\n## API\n\n### Grid Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| column | 列数 | _number \\| string_ | `4` |\n| gutter | 格子之间的间距，默认单位为`px` | _number \\| string_ | `0` |\n| border | 是否显示边框 | _boolean_ | `true` |\n| square | 是否将格子固定为正方形 | _boolean_ | `false` |\n| direction | 格子内容排列的方向，可选值为 `horizontal` | _string_ | `vertical` |\n\n### GridItem Slots\n\n| 名称    | 说明                 |\n| ------- | -------------------- |\n| default | 自定义宫格的所有内容 |\n'},8876:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},1852:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Icon 图标\n\n### 介绍\n\n基于字体的图标集，可以通过 Icon 组件使用，也可以在其他组件中通过 `icon` 属性引用。\n\n## 代码演示\n\n### 基础用法\n\n`Icon` 的 `name` 属性支持传入图标名称或图片链接，所有可用的图标名称见下方示例。\n\n```jsx\nimport { Icon, Row, Col } from 'mooli-mobile';\n\nReactDOM.render(\n  <div className=\"demo-icon\">\n    <Row>\n      <Col span={6}>\n        <Icon name=\"chat-o\" />\n      </Col>\n      <Col span={6}>\n        <Icon name=\"https://b.yzcdn.cn/vant/icon-demo-1126.png\" />\n      </Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n### 徽标提示\n\n设置 `dot` 属性后，会在图标右上角展示一个小红点；设置 `badge` 属性后，会在图标右上角展示相应的徽标。\n\n```jsx\nimport { Icon, Row, Col } from 'mooli-mobile';\n\nReactDOM.render(\n  <div className=\"demo-icon\">\n    <Row>\n      <Col span={6}>\n        <Icon name=\"chat-o\" dot />\n      </Col>\n      <Col span={6}>\n        <Icon name=\"chat-o\" badge=\"9\" />\n      </Col>\n      <Col span={6}>\n        <Icon name=\"chat-o\" badge=\"99+\" />\n      </Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n### 图标大小\n\n`Icon` 的 `size` 属性用来设置图标的尺寸大小，默认单位为 `px`。\n\n```jsx\nimport { Icon, Row, Col } from 'mooli-mobile';\n\nReactDOM.render(\n  <div className=\"demo-icon\">\n    <Row>\n      <Col span={6}>\n        <Icon name=\"smile-o\" size=\"24\" />\n      </Col>\n      <Col span={6}>\n        <Icon name=\"smile-o\" size=\"30\" />\n      </Col>\n      <Col span={6}>\n        <Icon name=\"smile-o\" size=\"40\" />\n      </Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n### 图标颜色\n\n`Icon` 的 `color` 属性用来设置图标的颜色。\n\n```jsx\nimport { Icon, Row, Col } from 'mooli-mobile';\n\nReactDOM.render(\n  <div className=\"demo-icon\">\n    <Row>\n      <Col span={6}>\n        <Icon name=\"cart-o\" color=\"#07c160\" />\n      </Col>\n      <Col span={6}>\n        <Icon name=\"fire-o\" color=\"#1989fa\" />\n      </Col>\n      <Col span={6}>\n        <Icon name=\"coupon-o\" color=\"#ff976a\" />\n      </Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n### 基础图标\n\n```jsx\nimport { Icon, Row, Col } from 'mooli-mobile';\n\nconst basic = [\n  'success',\n  'plus',\n  'cross',\n  'fail',\n  'arrow',\n  'arrow-left',\n  'arrow-up',\n  'arrow-down',\n];\n\nReactDOM.render(\n  <div className=\"demo-icon\">\n    <Row>\n    {basic.map((item) => (\n      <Col key={item} span={6}>\n        <Icon name={item} />\n        <span>{item}</span>\n      </Col>\n    ))}\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n### 线框风格\n\n`Icon` 的 `type` 属性支持传入图标名称或图片链接，所有可用的图标名称见右侧示例。\n\n```jsx\nimport { Icon, Row, Col } from 'mooli-mobile';\n\nconst basic = [\n  'location-o',\n    'like-o',\n    'star-o',\n    'phone-o',\n    'setting-o',\n    'fire-o',\n    'coupon-o',\n    'cart-o',\n    'shopping-cart-o',\n    'cart-circle-o',\n    'friends-o',\n    'comment-o',\n    'gem-o',\n    'gift-o',\n    'point-gift-o',\n    'send-gift-o',\n    'service-o',\n    'bag-o',\n    'todo-list-o',\n    'balance-list-o',\n    'close',\n    'clock-o',\n    'question-o',\n    'passed',\n    'add-o',\n    'gold-coin-o',\n    'info-o',\n    'play-circle-o',\n    'pause-circle-o',\n    'stop-circle-o',\n    'warning-o',\n    'phone-circle-o',\n    'music-o',\n    'smile-o',\n    'thumb-circle-o',\n    'comment-circle-o',\n    'browsing-history-o',\n    'underway-o',\n    'more-o',\n    'video-o',\n    'shop-o',\n    'shop-collect-o',\n    'share-o',\n    'chat-o',\n    'smile-comment-o',\n    'vip-card-o',\n    'award-o',\n    'diamond-o',\n    'volume-o',\n    'cluster-o',\n    'wap-home-o',\n    'photo-o',\n    'gift-card-o',\n    'expand-o',\n    'medal-o',\n    'good-job-o',\n    'manager-o',\n    'label-o',\n    'bookmark-o',\n    'bill-o',\n    'hot-o',\n    'hot-sale-o',\n    'new-o',\n    'new-arrival-o',\n    'goods-collect-o',\n    'eye-o',\n    'delete-o',\n    'font-o',\n    // without corresponding filled icon\n    'balance-o',\n    'refund-o',\n    'birthday-cake-o',\n    'user-o',\n    'orders-o',\n    'tv-o',\n    'envelop-o',\n    'flag-o',\n    'flower-o',\n    'filter-o',\n    'bar-chart-o',\n    'chart-trending-o',\n    'brush-o',\n    'bullhorn-o',\n    'hotel-o',\n    'cashier-o',\n    'newspaper-o',\n    'warn-o',\n    'notes-o',\n    'calendar-o',\n    'bulb-o',\n    'user-circle-o',\n    'desktop-o',\n    'apps-o',\n    'home-o',\n    'back-top',\n    'search',\n    'points',\n    'edit',\n    'qr',\n    'qr-invalid',\n    'closed-eye',\n    'down',\n    'scan',\n    'revoke',\n    'free-postage',\n    'certificate',\n    'logistics',\n    'contact',\n    'cash-back-record',\n    'after-sale',\n    'exchange',\n    'upgrade',\n    'ellipsis',\n    'description',\n    'records',\n    'sign',\n    'completed',\n    'failure',\n    'ecard-pay',\n    'peer-pay',\n    'balance-pay',\n    'credit-pay',\n    'debit-pay',\n    'cash-on-deliver',\n    'other-pay',\n    'tosend',\n    'pending-payment',\n    'paid',\n    'aim',\n    'discount',\n    'idcard',\n    'replay',\n    'shrink',\n];\n\nReactDOM.render(\n  <div className=\"demo-icon\">\n    <Row>\n    {basic.map((item) => (\n      <Col  key={item} span={6}>\n        <Icon name={item} />\n        <span>{item}</span>\n      </Col>\n    ))}\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n\n### 实底风格\n\n`Icon` 的 `type` 属性支持传入图标名称或图片链接，所有可用的图标名称见右侧示例。\n\n```jsx\nimport { Icon, Row, Col } from 'mooli-mobile';\n\nconst basic = [\n  'location',\n    'like',\n    'star',\n    'phone',\n    'setting',\n    'fire',\n    'coupon',\n    'cart',\n    'shopping-cart',\n    'cart-circle',\n    'friends',\n    'comment',\n    'gem',\n    'gift',\n    'point-gift',\n    'send-gift',\n    'service',\n    'bag',\n    'todo-list',\n    'balance-list',\n    'clear',\n    'clock',\n    'question',\n    'checked',\n    'add',\n    'gold-coin',\n    'info',\n    'play-circle',\n    'pause-circle',\n    'stop-circle',\n    'warning',\n    'phone-circle',\n    'music',\n    'smile',\n    'thumb-circle',\n    'comment-circle',\n    'browsing-history',\n    'underway',\n    'more',\n    'video',\n    'shop',\n    'shop-collect',\n    'share',\n    'chat',\n    'smile-comment',\n    'vip-card',\n    'award',\n    'diamond',\n    'volume',\n    'cluster',\n    'wap-home',\n    'photo',\n    'gift-card',\n    'expand',\n    'medal',\n    'good-job',\n    'manager',\n    'label',\n    'bookmark',\n    'bill',\n    'hot',\n    'hot-sale',\n    'new',\n    'new-arrival',\n    'goods-collect',\n    'eye',\n    'delete',\n    'font',\n    // without corresponding outline icon\n    'alipay',\n    'wechat',\n    'photograph',\n    'youzan-shield',\n    'umbrella-circle',\n    'bell',\n    'printer',\n    'map-marked',\n    'card',\n    'add-square',\n    'live',\n    'lock',\n    'audio',\n    'graphic',\n    'column',\n    'invition',\n    'play',\n    'pause',\n    'stop',\n    'weapp-nav',\n    'ascending',\n    'descending',\n    'bars',\n    'wap-nav',\n    'enlarge',\n    'photo-fail',\n    'sort',\n];\n\nReactDOM.render(\n  <div className=\"demo-icon\">\n    <Row>\n    {basic.map((item) => (\n      <Col key={item} span={6}>\n        <Icon name={item} />\n        <span>{item}</span>\n      </Col>\n    ))}\n    </Row>\n  </div>,\n  mountNode,\n);\n```\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| name | 图标名称或图片链接 | _string_ | - |\n| dot | 是否显示图标右上角小红点 | _boolean_ | `false` |\n| badge  | 图标右上角徽标的内容 | _number \\| string_ | - |\n| color | 图标颜色 | _string_ | `inherit` |\n| size | 图标大小，如 `20px` `2em`，默认单位为`px` | _number \\| string_ | `inherit` |\n| className | 附加类名       | _string_           | `--`   |\n| style     | 附加样式       | _objcet_           | `--`   |\n\n### Events\n\n| 事件名 | 说明           | 回调参数       |\n| ------ | -------------- | -------------- |\n| click  | 点击图标时触发 | _event: Event_ |"},9139:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},1784:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# ImagePreview 图片预览\n\n### 介绍\n\n图片放大预览，支持函数调用和组件调用两种方式。\n\n### 组件调用\n\n通过组件调用 ImagePreview 时，可以通过下面的方式进行注册。\n\n```jsx\nimport { Cell, ImagePreview } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  const images = [\n    'https://img01.yzcdn.cn/vant/apple-1.jpg',\n    'https://img01.yzcdn.cn/vant/apple-2.jpg',\n    'https://img01.yzcdn.cn/vant/apple-3.jpg',\n    'https://img01.yzcdn.cn/vant/apple-4.jpg',\n  ];\n  return (\n    <div className=\"demo-popup\">\n      <Cell arrow onClick={() => setVisible(true)}>\n        组件调用\n      </Cell>\n      <ImagePreview\n        visible={visible}\n        images={images}\n        onClose={() => setVisible(false)}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 函数调用\n\nImagePreview 是一个函数，调用函数后会直接在页面中展示图片预览界面。ImagePreview 支持传入配置对象，并通过 `initial` 选项指定图片的初始位置（索引值）。\n\n```jsx\nimport { Cell, ImagePreview, Toast } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  const images = [\n    'https://img01.yzcdn.cn/vant/apple-1.jpg',\n    'https://img01.yzcdn.cn/vant/apple-2.jpg',\n    'https://img01.yzcdn.cn/vant/apple-3.jpg',\n    'https://img01.yzcdn.cn/vant/apple-4.jpg',\n  ];\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          ImagePreview.create({\n            images,\n          });\n        }}\n      >\n        基础用法\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          ImagePreview.create({\n            closeable: true,\n            showIndicators: true,\n            showIndex: false,\n            maskClosable: false,\n            images,\n          });\n        }}\n      >\n        展示关闭按钮\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          ImagePreview.create({\n            initial: 2,\n            images,\n          });\n        }}\n      >\n        指定初始位置\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          ImagePreview.create({\n            images,\n            onChange(index) {\n              Toast(`当前索引下标值：${index}`);\n            },\n          });\n        }}\n      >\n        监听切换事件\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          ImagePreview.create({\n            images,\n            onClose() {\n              Toast('关闭');\n            },\n          });\n        }}\n      >\n        监听关闭事件\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          const igInstance = ImagePreview.create({\n            images,\n          });\n          setTimeout(() => igInstance.close(), 3000);\n        }}\n      >\n        异步 close 关闭\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数名 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| visible | 是否显示弹出层 | _boolean_ | `false` |\n| images | 需要预览的图片 URL 数组 | _string[]_ | `[]` |\n| initial | 图片预览起始位置索引 | _number \\| string_ | `0` |\n| swipeDuration | 动画时长，单位为`ms` | _number \\| string_ | `300` |\n| showIndex | 是否显示页码 | _boolean_ | `true` |\n| showIndicators | 是否显示轮播指示器 | _boolean_ | `false` |\n| loop | 是否开启循环播放 | _boolean_ | `true` |\n| lock | 是否锁定背景滚动 | _boolean_ | `true` |\n| destroy | 隐藏销毁组件 | _boolean_ | `false` |\n| className | 自定义类名 | _any_ | - |\n| closeable | 是否显示关闭图标 | _boolean_ | `false` |\n| closeIcon | 关闭图标名称或图片链接 | _string_ | `clear` |\n| closeIconPosition | 关闭图标位置，可选值为`top-left`<br>`bottom-left` `bottom-right` | _string_ | `top-right` |\n| maskClosable | 点击蒙层是否关闭 | _boolean_ | `true` |\n\n### Events\n\n通过组件调用 `ImagePreview` 时，支持以下事件：\n\n| 事件     | 说明               | 回调参数              |\n| -------- | ------------------ | --------------------- |\n| onClose  | 关闭时触发         | -                     |\n| onChange | 切换当前图片时触发 | index: 当前图片的索引 |\n\n### onChange 回调参数\n\n| 参数名 | 说明             | 类型     |\n| ------ | ---------------- | -------- |\n| index  | 当前图片的索引值 | _number_ |\n"},4632:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},9212:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Image 图片\n\n### 介绍\n\n增强版的 img 标签，提供多种图片填充模式，支持图片懒加载、加载中提示、加载失败提示。\n\n## 代码演示\n\n### 基础用法\n\n基础用法与原生 `img` 标签一致，可以设置 `src`、`width`、`height`、`alt` 等原生属性。\n\n```jsx\nimport { Image } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-image">\n      <Image\n        width="100"\n        height="100"\n        src="https://img.yzcdn.cn/vant/cat.jpeg"\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 填充模式\n\n通过 `fit` 属性可以设置图片填充模式，可选值见下方表格。\n\n```jsx\nimport { Image, Row, Col } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const fits = [\'cover\', \'fill\', \'none\', \'contain\', \'scale-down\'];\n  return (\n    <div className="demo-image">\n      <Row gutter="20">\n        {fits.map((item) => {\n          return (\n            <Col key={item} span="12">\n              <Image\n                width="8rem"\n                height="8rem"\n                fit={item}\n                src="https://img.yzcdn.cn/vant/cat.jpeg"\n              />\n              <div className="text">{item}</div>\n            </Col>\n          );\n        })}\n      </Row>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 圆形图片\n\n通过 `round` 属性可以设置图片变圆，注意当图片宽高不相等且 `fit` 为 `contain` 或 `scale-down` 时，将无法填充一个完整的圆形。\n\n```jsx\nimport { Image, Row, Col } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const fits = [\'cover\', \'fill\', \'none\', \'contain\', \'scale-down\'];\n  return (\n    <div className="demo-image">\n      <Row gutter="20">\n        {fits.map((item) => {\n          return (\n            <Col key={item} span="12">\n              <Image\n                round\n                width="8rem"\n                height="8rem"\n                fit={item}\n                src="https://img.yzcdn.cn/vant/cat.jpeg"\n              />\n              <div className="text">{item}</div>\n            </Col>\n          );\n        })}\n      </Row>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 加载中提示\n\n`Image` 组件提供了默认的加载中提示，支持通过 `loadingIndicator` 插槽自定义内容。\n\n```jsx\nimport { Image, Row, Col, Loading } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const renderLoadingIndicator = () => {\n    return <Loading type="spinner" size="20" />;\n  };\n  return (\n    <div className="demo-image">\n      <Row gutter="20">\n        <Col span="10">\n          <Image width="105" height="105" />\n          <div className="text">默认提示</div>\n        </Col>\n        <Col span="10">\n          <Image\n            width="105"\n            height="105"\n            loadingIndicator={renderLoadingIndicator()}\n          />\n          <div className="text">自定义提示</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 加载失败提示\n\n`Image` 组件提供了默认的加载失败提示，支持通过 `error` 插槽自定义内容。\n\n```jsx\nimport { Image, Row, Col, Loading } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const renderErrorIndicator = () => {\n    return <span>加载失败</span>;\n  };\n  return (\n    <div className="demo-image">\n      <Row gutter="20">\n        <Col span="10">\n          <Image\n            width="105"\n            height="105"\n            src="https://img.yzcdn.cn/mooli/cat.jpeg"\n          />\n          <div className="text">默认提示</div>\n        </Col>\n        <Col span="10">\n          <Image\n            width="105"\n            height="105"\n            src="https://img.yzcdn.cn/mooli/cat.jpeg"\n            errorIndicator={renderErrorIndicator()}\n          />\n          <div className="text">自定义提示</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| src | 图片链接 | _string_ | - |\n| fit | 图片填充模式 | _string_ | `fill` |\n| alt | 替代文本 | _string_ | - |\n| width | 宽度，默认单位为 `px` | _number \\| string_ | - |\n| height | 高度，默认单位为 `px` | _number \\| string_ | - |\n| radius | 圆角大小，默认单位为 `px` | _number \\| string_ | `0` |\n| round | 是否显示为圆形 | _boolean_ | `false` |\n| showError | 是否展示图片加载失败提示 | _boolean_ | `true` |\n| showLoading | 是否展示图片加载中提示 | _boolean_ | `true` |\n| errorIcon | 失败时提示的[图标名称](#/components/icon/zh-CN)或图片链接 | _string_ | `photo-fail` |\n| errorIndicator | 自定义错误指示符 | _string_ | `--` |\n| loadingIcon | 加载时提示的[图标名称](#/components/icon/zh-CN)或图片链接 | _string_ | `photo` |\n| loadingIndicator | 自定义加载指示符 | _string_ | `--` |\n| iconSize | 加载图标和失败图标的大小 | _number \\| string_ | `32px` |\n| iconPrefix | 图标自定义类名 | _string_ | `--` |\n\n### 图片填充模式 \b\n\n| 名称       | 含义                                                   |\n| ---------- | ------------------------------------------------------ |\n| contain    | 保持宽高缩放图片，使图片的长边能完全显示出来           |\n| cover      | 保持宽高缩放图片，使图片的短边能完全显示出来，裁剪长边 |\n| fill       | 拉伸图片，使图片填满元素                               |\n| none       | 保持图片原有尺寸                                       |\n| scale-down | 取 `none` 或 `contain` 中较小的一个                    |\n\n### Events\n\n| 事件名  | 说明               | 回调参数            |\n| ------- | ------------------ | ------------------- |\n| onClick | 点击图片时触发     | _event: MouseEvent_ |\n| onLoad  | 图片加载完毕时触发 | -                   |\n| onError | 图片加载失败时触发 | -                   |\n\n### Slots\n\n| 名称    | 说明                 |\n| ------- | -------------------- |\n| default | 自定义图片下方的内容 |\n'},4884:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},5959:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Image 图片\n\n### 介绍\n\n增强版的 img 标签，提供多种图片填充模式，支持图片懒加载、加载中提示、加载失败提示。\n\n## 代码演示\n\n### 基础用法\n\n基础用法与原生 `img` 标签一致，可以设置 `src`、`width`、`height`、`alt` 等原生属性。\n\n```jsx\nimport { Button } from 'mooli-mobile';\n\nconst Demo = () => {\n  return <div className=\"demo-name\"></div>;\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"},4158:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},9202:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# List 列表\n\n### 介绍\n\n瀑布流滚动加载，用于展示长列表，当列表即将滚动到底部时，会触发事件并加载更多列表项。\n\n## 代码演示\n\n### 基础用法\n\nList 组件通过 `loading` 和 `finished` 两个变量控制加载状态，当组件滚动到底部时，会触发 `load` 事件并将 `loading` 设置成 `true`。此时可以发起异步操作并更新数据，数据更新完毕后，将 `loading` 设置成 `false` 即可。若数据已全部加载完毕，则直接将 `finished` 设置成 `true` 即可。\n\n```jsx\nimport { List, Cell } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [list, setList] = React.useState([]);\n  const [finished, setFinished] = React.useState(false);\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const fetchData = () => {\n    setTimeout(() => {\n      let curList = [...list];\n      for (let i = 0; i < 14; i++) {\n        curList.push(undefined);\n      }\n      // 加载状态结束\n      setLoading(false);\n      // 显示错误提示\n      if (curList.length >= 40 && curList.length < 52) {\n        setError(true);\n      }\n      // 显示加载完成\n      if (curList.length >= 52) {\n        setFinished(true);\n      }\n      setList(curList);\n    }, 1000);\n  };\n  const onLoad = () => {\n    setLoading(true);\n    fetchData();\n  };\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className="demo-list">\n      <List\n        finished={finished}\n        loading={loading}\n        error={error}\n        onLoad={onLoad}\n        finishedText="没有更多了"\n      >\n        {list.map((item, index) => (\n          <Cell key={index} title={index} />\n        ))}\n      </List>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| loading | 是否处于加载状态，加载过程中不触发`onLoad`事件 | _boolean_ | `false` |\n| finished | 是否已加载完成，加载完成后不再触发`onLoad`事件 | _boolean_ | `false` |\n| error | 是否加载失败，加载失败后点击错误提示可以重新<br>触发`onLoad`事件 | _boolean_ | `false` |\n| offset | 滚动条与底部距离小于 offset 时触发`onLoad`事件 | _number \\| string_ | `300` |\n| loadingText | 加载过程中的提示文案 | _string_ | `加载中...` |\n| finishedText | 加载完成后的提示文案 | _string_ | - |\n| errorText | 加载失败后的提示文案 | _string_ | - |\n| immediateCheck | 是否在初始化时立即执行滚动位置检查 | _boolean_ | `true` |\n| direction | 滚动触发加载的方向，可选值为`up` | _string_ | `down` |\n\n### Events\n\n| 事件名 | 说明                               | 回调参数 |\n| ------ | ---------------------------------- | -------- |\n| onLoad | 滚动条与底部距离小于 offset 时触发 | -        |\n\n### Slots\n\n| 名称     | 说明                       |\n| -------- | -------------------------- |\n| default  | 列表内容                   |\n| loading  | 自定义底部加载中提示       |\n| finished | 自定义加载完成后的提示文案 |\n| error    | 自定义加载失败后的提示文案 |\n'},1055:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Loading\n\n### Introduce\n\nThe load icon is used to indicate the transition state during loading\n\n## Usage\n\n### Type\n\nThe type of loading icon can be set through the `type` attribute. The default is `circular`，The optional values are `spinner、beat、clockwise、line`。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading vertical>circular</Loading>\n    <Loading vertical type="spinner">\n      spinner\n    </Loading>\n    <Loading vertical type="beat">\n      beat\n    </Loading>\n    <Loading vertical type="clockwise">\n      clockwise\n    </Loading>\n    <Loading vertical type="line">\n      line\n    </Loading>\n  </div>,\n  mountNode,\n);\n```\n\n### Color\n\nSet the color of the loading icon through the `color` attribute\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading color="#52c41a" />\n    <Loading color="#1890ff" type="spinner" />\n    <Loading color="#faad14" type="beat" />\n    <Loading color="#666666" type="clockwise" />\n    <Loading color="#ff4d4f" type="line" />\n  </div>,\n  mountNode,\n);\n```\n\n### Size\n\nSet the size of the loading icon through the `size` attribute. The default unit is `px`\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading size="16" />\n    <Loading size="28" />\n    <Loading size="36" />\n  </div>,\n  mountNode,\n);\n```\n\n### Indicator\n\nIf the default load indicator does not meet the requirements, users can define it by themselves through the `indicator` attribute\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading\n      indicator={\n        <svg className="icon" fill="currentColor" viewBox="0 0 1024 1024">\n          <path\n            d="M832 512c0-176-144-320-320-320V128c211.2 0 384 172.8 384 384h-64zM192 512c0 176 144 320 320 320v64C300.8 896 128 723.2 128 512h64z"\n            p-id="8972"\n          ></path>\n        </svg>\n      }\n    />\n  </div>,\n  mountNode,\n);\n```\n\n### Text\n\nThe loaded copy can be a string or a reactnode node.\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading>loading...</Loading>\n  </div>,\n  mountNode,\n);\n```\n\n### Text Color\n\nSet the color and size of the loaded copy through the `textcolor` and `textsize` properties.\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading textColor="#0094ff">loading...</Loading>\n    <Loading textSize="16">loading...</Loading>\n  </div>,\n  mountNode,\n);\n```\n\n### Vertical\n\nThe load file direction can be set to the vertical direction.\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading type="spinner" vertical>\n      loading...\n    </Loading>\n  </div>,\n  mountNode,\n);\n```\n\n## API\n\n### Props\n\n| Attribute | Description | Type | Default |\n| --- | --- | --- | --- |\n| color | Loading color | _string_ | `#c9c9c9` |\n| type | Can be set to `spinner` | _string_ | `circular` |\n| size | Icon size | _number \\| string_ | `30px` |\n| textSize | Text font size | _number \\| string_ | `14px` |\n| textColor | Text color | _string_ | `#c9c9c9` |\n| indicator | Indicator | _string_ | `--` |\n| vertical | Whether to arrange icons and text content vertically | _boolean_ | `false` |\n| rotate | Rotate or not | _boolean_ | `true` |\n| className | additional classname | _string_ | `--` |\n| style | additional style | _objcet_ | `--` |\n\n### Slots\n\n| Name     | Description  |\n| -------- | ------------ |\n| children | Loading text |\n'},1988:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Loading 加载\n\n### 介绍\n\n加载图标，用于表示加载中的过渡状态。\n\n## 代码演示\n\n### 加载类型\n\n通过 `type` 属性可以设置加载图标的类型，默认为 `circular`，可选值为 `spinner、beat、clockwise、line`。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading vertical>circular</Loading>\n    <Loading vertical type="spinner">\n      spinner\n    </Loading>\n    <Loading vertical type="beat">\n      beat\n    </Loading>\n    <Loading vertical type="clockwise">\n      clockwise\n    </Loading>\n    <Loading vertical type="line">\n      line\n    </Loading>\n  </div>,\n  mountNode,\n);\n```\n\n### 自定义颜色\n\n通过 `color` 属性设置加载图标的颜色。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading color="#52c41a" />\n    <Loading color="#1890ff" type="spinner" />\n    <Loading color="#faad14" type="beat" />\n    <Loading color="#666666" type="clockwise" />\n    <Loading color="#ff4d4f" type="line" />\n  </div>,\n  mountNode,\n);\n```\n\n### 自定义大小\n\n通过 `size` 属性设置加载图标的大小，默认单位为 `px`。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading size="16" />\n    <Loading size="28" />\n    <Loading size="36" />\n  </div>,\n  mountNode,\n);\n```\n\n### 自定义指示符\n\n若默认的加载指示符不满足要求，用户可通过 `indicator` 属性自行定义。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading\n      indicator={\n        <svg className="icon" fill="currentColor" viewBox="0 0 1024 1024">\n          <path\n            d="M832 512c0-176-144-320-320-320V128c211.2 0 384 172.8 384 384h-64zM192 512c0 176 144 320 320 320v64C300.8 896 128 723.2 128 512h64z"\n            p-id="8972"\n          ></path>\n        </svg>\n      }\n    />\n  </div>,\n  mountNode,\n);\n```\n\n### 自定义加载文案\n\n加载文案可以为字符串也可以为 reactNode 节点。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading>加载中...</Loading>\n  </div>,\n  mountNode,\n);\n```\n\n### 自定义文案大小和颜色\n\n加载文案可以为字符串也可以为 reactNode 节点。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading textColor="#0094ff">加载中...</Loading>\n    <Loading textSize="16">加载中...</Loading>\n  </div>,\n  mountNode,\n);\n```\n\n### 垂直排列\n\n加载文案方向可以设置为垂直方向。\n\n```jsx\nimport { Loading } from \'mooli-mobile\';\n\nReactDOM.render(\n  <div className="demo-loading">\n    <Loading type="spinner" vertical>\n      加载中...\n    </Loading>\n  </div>,\n  mountNode,\n);\n```\n\n## API\n\n### Props\n\n| 参数      | 说明                          | 类型               | 默认值     |\n| --------- | ----------------------------- | ------------------ | ---------- |\n| color     | 颜色                          | _string_           | `#c9c9c9`  |\n| type      | 类型，可选值为 `spinner`      | _string_           | `circular` |\n| size      | 加载图标大小，默认单位为 `px` | _number \\| string_ | `30px`     |\n| textSize  | 文字大小，默认单位为 `px`     | _number \\| string_ | `14px`     |\n| textColor | 文字颜色                      | _string_           | `#c9c9c9`  |\n| indicator | 指示符                        | _string_           | `--`       |\n| vertical  | 是否垂直排列图标和文字内容    | _boolean_          | `false`    |\n| rotate    | 是否旋转                      | _boolean_          | `true`     |\n| className | 附加类名                      | _string_           | `--`       |\n| style     | 附加样式                      | _objcet_           | `--`       |\n\n### Slots\n\n| 名称     | 说明     |\n| -------- | -------- |\n| children | 加载文案 |\n'},7644:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},1122:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Notify 消息提示\n\n### 介绍\n\n在页面顶部展示消息提示，支持函数调用和组件调用两种方式。\n\n## 代码演示\n\n### 组件调用\n\n通过组件调用 Notify 时，可以通过下面的方式进行注册：\n\n```jsx\nimport { Notify, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          setVisible(!visible);\n          setTimeout(() => {\n            setVisible(false);\n          }, 2000);\n        }}\n      >\n        基本弹窗\n      </Cell>\n      <Notify visible={visible} type=\"success\">\n        通知内容\n      </Notify>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 函数调用\n\n支持 `primary`、`success`、`warning`、`danger` 四种通知类型，默认为 `danger`。\n\n```jsx\nimport { Notify, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Notify.info({ message: '通知内容' });\n        }}\n      >\n        主要通知\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Notify.success({ message: '成功通知' });\n        }}\n      >\n        成功通知\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Notify.danger({ message: '危险通知' });\n        }}\n      >\n        危险通知\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Notify.warning({ message: '警告通知' });\n        }}\n      >\n        警告通知\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自定义通知\n\n自定义消息通知的颜色和展示时长。\n\n```jsx\nimport { Notify, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Notify.info({\n            message: '自定义颜色',\n            color: '#ad0000',\n            background: '#ffe1e1',\n          });\n        }}\n      >\n        自定义颜色\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Notify.success({ message: '自定义时长', duration: 1000 });\n        }}\n      >\n        自定义时长\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          let n = Notify.success({ message: '自定义时长', duration: 0 });\n          setTimeout(() => n.close(), 3000);\n        }}\n      >\n        clsoe 关闭\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"},1872:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},7919:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Overlay 遮罩层\n\n### 介绍\n\n创建一个遮罩层，用于强调特定的页面元素，并阻止用户进行其他操作。大部分需求基本可以使用 Popup 组件完成，Overlay 组件更纯粹的用于处理简单的弹窗显示隐藏。\n\n## 代码演示\n\n### 基础用法\n\n```jsx\nimport { Overlay, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  const [visible1, setVisible1] = React.useState(false);\n  return (\n    <div className="demo-overlay">\n      <Button type="info" onClick={() => setVisible(true)}>\n        普通遮罩层按钮\n      </Button>\n      <Button type="info" onClick={() => setVisible1(true)}>\n        嵌入内容\n      </Button>\n      <Overlay visible={visible} onClick={() => setVisible(false)} />\n      <Overlay visible={visible1} onClick={() => setVisible1(false)}>\n        <div className="wrapper">\n          <div className="block"></div>\n        </div>\n      </Overlay>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 设置动画时长\n\n通过 duration 设置显示隐藏动画时长，默认为 0.3s（单位秒 s）。\n\n```jsx\nimport { Overlay, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className="demo-button">\n      <Button type="info" onClick={() => setVisible(true)}>\n        动画时长1s\n      </Button>\n      <Overlay\n        visible={visible}\n        duration={1}\n        onClick={() => setVisible(false)}\n      />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 销毁\n\n通过 destory 设置遮罩层是否销毁，默认不销毁。\n\n```jsx\nimport { Overlay, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className="demo-button">\n      <Button type="info" onClick={() => setVisible(true)}>\n        销毁遮罩层\n      </Button>\n      <Overlay visible={visible} destory onClick={() => setVisible(false)} />\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| show | 是否展示遮罩层 | _boolean_ | `false` |\n| zIndex | z-index 层级 | _number \\| string_ | `1` |\n| duration | 动画时长，单位秒 | _number \\| string_ | `0.3` |\n| destory | 是否销毁 | _boolean_ | `false` |\n| lockScroll | 是否锁定背景滚动，锁定时蒙层里的内容也将无法滚动 | _boolean_ | `true` |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### Events\n\n| 事件名 | 说明       | 回调参数       |\n| ------ | ---------- | -------------- |\n| click  | 点击时触发 | _event: Event_ |\n\n### Slots\n\n| 名称    | 说明                               |\n| ------- | ---------------------------------- |\n| default | 默认插槽，用于在遮罩层上方嵌入内容 |\n'},8342:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},3204:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Popover 气泡弹出框\n\n### 介绍\n\n弹出式的气泡菜单。\n\n## 代码演示\n\n### 基础用法\n\n基本使用场景。\n\n```jsx\nimport { Button, Popover } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const list = [{ text: \'选项一\' }, { text: \'选项二\' }, { text: \'选项三\' }];\n  const renderContent = () => {\n    return (\n      <ul className="popover-demo-list">\n        {list.map((item, index) => (\n          <li className="popover-demo-item mooli-hairline--bottom" key={index}>\n            {item.text}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n  return (\n    <div className="demo-popover">\n      <Popover content={renderContent()}>\n        <Button type="primary">浅色风格</Button>\n      </Popover>\n      <Popover content={renderContent()} theme="dark">\n        <Button type="info">深色风格</Button>\n      </Popover>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 弹出位置\n\n通过 `placement` 属性来控制气泡的弹出位置。\n\n```jsx\nimport { Button, Popover } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const renderContent = (content) => {\n    return <div className="annular-demo-content ">{content}</div>;\n  };\n  return (\n    <div className="demo-popover">\n      <div className="annular-demo-list">\n        <Popover\n          content={renderContent(\'bottomLeft\')}\n          placement={\'bottomLeft\'}\n          color="#eb2f96"\n        >\n          <Button size="mini">BL</Button>\n        </Popover>\n        <Popover\n          content={renderContent(\'bottom\')}\n          placement={\'bottom\'}\n          color="#13c2c2"\n        >\n          <Button size="mini">Bottom</Button>\n        </Popover>\n        <Popover\n          content={renderContent(\'bottomRight\')}\n          placement={\'bottomRight\'}\n          color="#722ed1"\n        >\n          <Button size="mini">BR</Button>\n        </Popover>\n      </div>\n      <div className="annular-demo-list">\n        <Popover\n          content={renderContent(\'rightTop\')}\n          placement={\'rightTop\'}\n          color="#2f54eb"\n        >\n          <Button size="mini">RT</Button>\n        </Popover>\n        <Popover\n          content={renderContent(\'right\')}\n          placement={\'right\'}\n          color="#eb2f96"\n        >\n          <Button size="mini">Right</Button>\n        </Popover>\n        <Popover\n          content={renderContent(\'rightBottom\')}\n          placement={\'rightBottom\'}\n          color="#fa541c"\n        >\n          <Button size="mini">RB</Button>\n        </Popover>\n      </div>\n      <div className="annular-demo-list">\n        <Popover\n          content={renderContent(\'leftTop\')}\n          placement={\'leftTop\'}\n          color="#faad14"\n        >\n          <Button size="mini">LT</Button>\n        </Popover>\n        <Popover\n          content={renderContent(\'left\')}\n          placement={\'left\'}\n          color="#a0d911"\n        >\n          <Button size="mini">Left</Button>\n        </Popover>\n        <Popover\n          content={renderContent(\'leftBottom\')}\n          placement={\'leftBottom\'}\n          color="#2db7f5"\n        >\n          <Button size="mini">LB</Button>\n        </Popover>\n      </div>\n      <div className="annular-demo-list">\n        <Popover\n          content={renderContent(\'topLeft\')}\n          placement={\'topLeft\'}\n          color="#87d068"\n        >\n          <Button size="mini">TL</Button>\n        </Popover>\n        <Popover content={renderContent(\'top\')} placement={\'top\'} color="#f50">\n          <Button size="mini">Top</Button>\n        </Popover>\n        <Popover\n          content={renderContent(\'topRight\')}\n          placement={\'topRight\'}\n          color="#108ee9"\n        >\n          <Button size="mini">TR</Button>\n        </Popover>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| visible | 用于手动控制浮层显隐 | _boolean_ | `false` |\n| content | 弹出框内容 | _string_ | `--` |\n| placement | 弹出位置 | _string_ | `bottom` |\n| theme | 主题风格，可选值为 `dark` | _string_ | `light` |\n| color | 背景颜色 | _string_ | `--` |\n| trigger | 触发方式，可选值为 `hover` `focus` `contextMenu` `mouseDown` | _string_ | `click` |\n| destroy | 关闭是否销毁 | _boolean_ | `false` |\n| duration | 动画时长，单位秒 | _number \\| string_ | `0.3` |\n| offset | 出现位置的偏移量 | _[number, number]_ | `0` |\n| visibleArrow | 是否显示箭头 | _boolean_ | `true` |\n| arrowSize | 箭头大小 | _number_ | `6` |\n| delay | 显示/隐藏延迟时间 | _number_ | `100` |\n| disabled | 是否禁用 | _boolean_ | `false` |\n| transition | popup 动画 | _string_ | - |\n| component | 指定 popup 挂载的节点 | _string \\| Element_ | - |\n| rootComponent | 指定根 root 挂载的节点 | _string \\| Element_ | - |\n| rootClassName | 自定义 root 类名 | _string \\| Array \\| object_ | - |\n| rootStyle | 自定义 root 样式 | _object_ | - |\n| rootProps | root 元素属性 | _object_ | - |\n| maskComponent | 指定 mask 挂载的节点 | _string \\| Element_ | - |\n| maskTransition | mask 动画（如需在动画周期内触发，请定义相关动画函数） | _string_ | - |\n| maskClassName | 自定义遮罩层类名 | _string \\| Array \\| object_ | - |\n| maskStyle | 自定义遮罩层样式 | _object_ | - |\n| maskProps | mask 元素属性（如需监听更多事件，可以在该属性内定义） | _object_ | - |\n\n### Events\n\n| 事件名          | 说明             | 回调参数            |\n| --------------- | ---------------- | ------------------- |\n| onBeforeShow    | 显示之前触发事件 | _event: MouseEvent_ |\n| onAfterShow     | 显示之后触发事件 | _event: MouseEvent_ |\n| onBeforeHide    | 隐藏之前触发事件 | _event: MouseEvent_ |\n| onAfterHide     | 隐藏之后触发事件 | _event: MouseEvent_ |\n| onVisibleChange | 显示隐藏触发事件 | _event: MouseEvent_ |\n\n### Slots\n\n| 名称    | 说明           |\n| ------- | -------------- |\n| default | 自定义菜单内容 |\n'},4309:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},6036:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Popup 弹出层\n\n### 介绍\n\n弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。\n\n## 代码演示\n\n### 基础用法\n\n通过 `visible` 控制弹出层是否展示。\n\n```jsx\nimport { Popup, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell arrow onClick={() => setVisible(!visible)}>\n        展示弹出层\n      </Cell>\n      <Popup\n        visible={visible}\n        duration={0.5}\n        round\n        onClickMask={() => setVisible(false)}\n      >\n        <div className=\"wrapper\">\n          <div className=\"block\"></div>\n        </div>\n      </Popup>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 弹出位置\n\n通过 `position` 属性设置弹出位置，默认居中弹出，可以设置为 `top`、`bottom`、`left`、`right`、`center`。\n\n```jsx\nimport { Popup, Cell } from 'mooli-mobile';\nconst visibles = {\n  top: false,\n  left: false,\n  right: false,\n  bottom: false,\n};\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(visibles);\n  const positions = [\n    {\n      title: '顶部弹出',\n      value: 'top',\n    },\n    {\n      title: '左侧弹出',\n      value: 'left',\n    },\n    {\n      title: '右侧弹出',\n      value: 'right',\n    },\n    {\n      title: '底部弹出',\n      value: 'bottom',\n    },\n  ];\n\n  return (\n    <div className=\"demo-popup\">\n      {positions.map((item) => {\n        return (\n          <div key={item.value}>\n            <Cell\n              arrow\n              onClick={() => {\n                let curVisibles = { ...visibles };\n                curVisibles[item.value] = true;\n                setVisible({ ...curVisibles });\n              }}\n            >\n              {item.title}\n            </Cell>\n            <Popup\n              visible={visible[item.value]}\n              position={item.value}\n              onClickMask={() => setVisible(false)}\n            >\n              <div className=\"wrapper\">\n                <div className=\"block\"></div>\n              </div>\n            </Popup>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 关闭图标\n\n设置 `closeable` 属性后，会在弹出层的右上角显示关闭图标，并且可以通过 `closeIcon` 属性自定义图标，使用 `closeIconPosition` 属性可以自定义图标位置。\n\n```jsx\nimport { Popup, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  const [closeIcon, setCloseIcon] = React.useState();\n  const [closeIconPosition, setCloseIconPosition] = React.useState();\n  const close = () => setVisible(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          setVisible(!visible);\n          setCloseIcon();\n          setCloseIconPosition();\n        }}\n      >\n        关闭图标\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          setVisible(!visible);\n          setCloseIcon('close');\n          setCloseIconPosition();\n        }}\n      >\n        自定义图标\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          setVisible(!visible);\n          setCloseIcon();\n          setCloseIconPosition('top-left');\n        }}\n      >\n        图标位置\n      </Cell>\n      <Popup\n        visible={visible}\n        position=\"bottom\"\n        closeable\n        closeIcon={closeIcon}\n        closeIconPosition={closeIconPosition}\n        onClickIcon={() => setVisible(false)}\n        onClickMask={() => setVisible(false)}\n      >\n        <div className=\"wrapper\">\n          <div className=\"block\"></div>\n        </div>\n      </Popup>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 圆角弹窗\n\n设置 `round` 属性后，弹窗会根据弹出位置添加不同的圆角样式。\n\n```jsx\nimport { Popup, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell arrow onClick={() => setVisible(!visible)}>\n        圆角弹窗\n      </Cell>\n      <Popup\n        visible={visible}\n        round\n        position=\"bottom\"\n        onClickMask={() => setVisible(false)}\n      >\n        <div className=\"wrapper\">\n          <div className=\"block\"></div>\n        </div>\n      </Popup>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自定义事件\n\n通过 `transition` 或者 `maskTransition` 属性可以灵活自定义 `popup` 面板和 `mask` 蒙层动画函数，实现更丰富的动画效果。此外还可以通过 `props` 或则 `maskProps` 属性定义 `popup` 面板和 `mask` 蒙层所有事件函数。\n\n```jsx\nimport { Popup, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div className=\"demo-popup\">\n      <Cell arrow onClick={() => setVisible(!visible)}>\n        自定义事件\n      </Cell>\n      <Popup\n        visible={visible}\n        round\n        position=\"bottom\"\n        onClickMask={() => setVisible(false)}\n        onClick={() => {\n          console.log('popup面板点击事件');\n        }}\n        maskTransition={{\n          onEnter: () => {\n            console.log('mask蒙层动画开始后执行');\n          },\n          onExited: () => {\n            console.log('mask蒙层动画结束后执行');\n          },\n        }}\n        maskProps={{\n          onDoubleClick: () => {\n            console.log('mask蒙层双击事件');\n          },\n        }}\n      >\n        <div className=\"wrapper\">\n          <div className=\"block\"></div>\n        </div>\n      </Popup>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| visible | 是否显示弹出层 | _boolean_ | `false` |\n| destroy | 隐藏销毁组件 | _boolean_ | `false` |\n| prefixCls | 样式前缀 | _string_ | - |\n| position | 弹出位置，可选值为 `top` `bottom` `right` `left` | _string_ | `center` |\n| mask | 是否显示遮罩层 | _boolean_ | `true` |\n| disableMask | 禁用 mask | _boolean_ | `false` |\n| duration | 动画时长，单位秒 | _number \\| string_ | `0.3` |\n| round | 是否显示圆角 | _boolean_ | `false` |\n| zIndex | z-index 层级值 | _boolean_ | `10` |\n| fixed | 使用 fixed 定位 popup | _boolean_ | `true` |\n| lock | 是否锁定背景滚动 | _boolean_ | `true` |\n| lazy | 是否在显示弹层时才渲染节点 | _boolean_ | `true` |\n| closeable | 是否显示关闭图标 | _boolean_ | `false` |\n| closeIcon | 关闭[图标名称](#/components/icon/zh-CN)或图片链接 | _string_ | `cross` |\n| closeIconPosition | 关闭图标位置，可选值为 `top-left`<br>`bottom-left` `bottom-right` | _string_ | `top-right` |\n| transition | popup 动画 | _string_ | - |\n| component | 指定 popup 挂载的节点 | _string \\| Element_ | - |\n| rootComponent | 指定根 root 挂载的节点 | _string \\| Element_ | - |\n| rootClassName | 自定义 root 类名 | _string \\| Array \\| object_ | - |\n| rootStyle | 自定义 root 样式 | _object_ | - |\n| rootProps | root 元素属性 | _object_ | - |\n| maskComponent | 指定 mask 挂载的节点 | _string \\| Element_ | - |\n| maskTransition | mask 动画（如需在动画周期内触发，请定义相关动画函数） | _string_ | - |\n| maskClassName | 自定义遮罩层类名 | _string \\| Array \\| object_ | - |\n| maskStyle | 自定义遮罩层样式 | _object_ | - |\n| maskProps | mask 元素属性（如需监听更多事件，可以在该属性内定义） | _object_ | - |\n\n### Events\n\n| 事件名      | 说明                    | 回调参数            |\n| ----------- | ----------------------- | ------------------- |\n| onClick     | 点击 popup 弹出层时触发 | _event: MouseEvent_ |\n| onClickMask | 点击遮罩层时触发        | _event: MouseEvent_ |\n| onClickIcon | 点击关闭图标时触发      | _event: MouseEvent_ |\n\n### Slots\n\n| 名称    | 说明     |\n| ------- | -------- |\n| default | 弹窗内容 |\n"},7349:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},3712:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# PullRefresh 下拉刷新\n\n### 介绍\n\n用于提供下拉刷新的交互操作。\n\n### 基础用法\n\n下拉刷新时会触发 `onRefresh` 事件，在事件的回调函数中可以进行同步或异步操作，操作完成后将 `finished` 设置为 `false`，表示加载完成。通过 `successText` 可以设置刷新成功后的顶部提示文案。通过插槽可以自定义下拉刷新过程中的提示内容。\n\n```jsx\nimport { PullRefresh, Cell, Tabs, TabPane } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const [count, setCount] = React.useState(0);\n  const [finished, setFinished] = React.useState(false);\n  const getNewData = () => {\n    return new Promise((res) => {\n      setTimeout(() => {\n        let c = Number(count);\n        setCount((c += 1));\n        setFinished(true);\n      }, 1500);\n    });\n  };\n  return (\n    <div className="demo-pull-refresh">\n      <Tabs>\n        <TabPane title="基础用法">\n          <PullRefresh finished={finished} onRefresh={getNewData}>\n            <p>刷新次数: {count}</p>\n          </PullRefresh>\n        </TabPane>\n        <TabPane title="成功提示">\n          <PullRefresh\n            finished={finished}\n            onRefresh={getNewData}\n            successText="自定义刷新成功"\n          >\n            <p>刷新次数: {count}</p>\n          </PullRefresh>\n        </TabPane>\n        <TabPane title="自定义提示">\n          <PullRefresh\n            finished={finished}\n            onRefresh={getNewData}\n            pullingText="自定义下拉即可刷新..."\n            loosing={\n              <img\n                className="doge"\n                src="https://img01.yzcdn.cn/vant/doge-fire.jpg"\n              />\n            }\n            loadingText="自定义加载中..."\n          >\n            <p>刷新次数: {count}</p>\n          </PullRefresh>\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| finished | 是否处于加载完成 | _boolean_ | `false` |\n| pullingText | 下拉过程提示文案 | _string_ | `下拉即可刷新...` |\n| loosingText | 释放过程提示文案 | _string_ | `释放即可刷新...` |\n| loadingText | 加载过程提示文案 | _string_ | `加载中...` |\n| successText | 刷新成功提示文案 | _string_ | - |\n| successDuration | 刷新成功提示展示时长(ms) | _number \\| string_ | `500` |\n| animationDuration | 动画时长 | _number \\| string_ | `300` |\n| headHeight | 顶部内容高度 | _number \\| string_ | `50` |\n| pullDistance | 触发下拉刷新的距离 | _number \\| string_ | 与 `headHeight` 一致 |\n| disabled | 是否禁用下拉刷新 | _boolean_ | `false` |\n\n### Events\n\n| 事件名    | 说明           | 回调参数 |\n| --------- | -------------- | -------- |\n| onRefresh | 下拉刷新时触发 | -        |\n\n### Slots\n\n| 名称     | 说明                 | 参数                       |\n| -------- | -------------------- | -------------------------- |\n| children | 自定义内容           | -                          |\n| normal   | 非下拉状态时顶部内容 | -                          |\n| pulling  | 下拉过程中顶部内容   | { distance: 当前下拉距离 } |\n| loosing  | 释放过程中顶部内容   | { distance: 当前下拉距离 } |\n| loading  | 加载过程中顶部内容   | { distance: 当前下拉距离 } |\n| success  | 刷新成功提示内容     | -                          |\n'},1856:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},4707:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Sticky 粘性布局\n\n### 介绍\n\nSticky 组件与 CSS 中`position: sticky`属性实现的效果一致，当组件在屏幕范围内时，会按照正常的布局排列，当组件滚出屏幕范围时，始终会固定在屏幕顶部。\n\n## 代码演示\n\n### 基础用法\n\n将内容包裹在 `Sticky` 组件内即可。\n\n```jsx\nimport { Sticky, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const onScroll = (scrollTop, isFixed) => {\n    console.log(scrollTop);\n    console.log(isFixed);\n  };\n  return (\n    <div className="demo-sticky">\n      <Sticky onScroll={onScroll}>\n        <Button type="primary">基础用法</Button>\n      </Sticky>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 吸顶距离\n\n通过 `offsetTop` 属性可以设置组件在吸顶时与顶部的距离。\n\n```jsx\nimport { Sticky, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const onChange = (isFixed) => {\n    console.log(`isFixed: ${isFixed}`);\n  };\n  return (\n    <div className="demo-sticky">\n      <Sticky offsetTop="50" onChange={onChange}>\n        <Button style={{ marginLeft: 98 }} type="primary">\n          基础用法\n        </Button>\n      </Sticky>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 指定容器\n\n通过 `container` 属性可以指定组件的容器，页面滚动时，组件会始终保持在容器范围内，当组件即将超出容器底部时，会固定在容器的底部。\n\n```jsx\nimport { Sticky, Button } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-sticky">\n      <div id="container" style={{ height: 150, backgroundColor: \'#f5f5f5\' }}>\n        <Sticky container="container">\n          <Button style={{ marginLeft: 192 }} type="primary">\n            基础用法\n          </Button>\n        </Sticky>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| offsetTop | 吸顶时与顶部的距离，支持 `px` `vw` `vh` `rem` 单位，默认 `px` | _number \\| string_ | `0` |\n| zIndex | 吸顶时的 z-index | _number \\| string_ | `99` |\n| container | 容器对应的 HTML 节点 | _Element_ | - |\n\n### Events\n\n| 事件名   | 说明                 | 回调参数                                  |\n| -------- | -------------------- | ----------------------------------------- |\n| onChange | 当吸顶状态改变时触发 | _isFixed: boolean_                        |\n| onScroll | 滚动时触发           | _{ scrollTop: number, isFixed: boolean }_ |\n'},6240:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},2097:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Swiper 轮播\n\n### 介绍\n\n用于循环播放一组图片或内容。\n\n## 代码演示\n\n### 基础用法\n\n可以通过 `arrow` 属性设置是否显示左右箭头；设置 `indicator`显示指示器；设置 `touchable` 是否可以通过手势滑动。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  const [instance, setInstance] = React.useState(); // 获取swiper实例方法，可执行相应方法\n\n  React.useEffect(() => {\n    if (instance) {\n      setTimeout(() => {\n        instance.scrollNext(); // 3 秒后自动滚到下一个\n      }, 3000);\n    }\n  }, [instance]);\n\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper\n        arrow\n        indicator\n        touchable={false}\n        onChange={(index) => console.log(index)}\n        onRef={(instance) => setInstance(instance)}\n      >\n        <SwiperItem>1</SwiperItem>\n        <SwiperItem>2</SwiperItem>\n        <SwiperItem>3</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自动轮播/循环轮播\n\n每个 SwiperItem 代表一张轮播卡片，可以通过 `autoPlay` 属性设置自动轮播的间隔（默认值 4000）；设置 `loop` 开启轮播模式；设置 `initial` 可初始位置索引值（默认 0）。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper autoPlay={3000} initial={1} loop>\n        <SwiperItem>1</SwiperItem>\n        <SwiperItem>2</SwiperItem>\n        <SwiperItem>3</SwiperItem>\n        <SwiperItem>4</SwiperItem>\n        <SwiperItem>5</SwiperItem>\n        <SwiperItem>6</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 垂直切换\n\n每个 SwiperItem 代表一张轮播卡片，可以通过 `vertical` 属性开启垂直模式（注意：必须为父类容器设置高度）。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper vertical loop style={{ height: 150 }} indicator>\n        <SwiperItem>1</SwiperItem>\n        <SwiperItem>2</SwiperItem>\n        <SwiperItem>3</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 对齐方式（居中）\n\n每个 SwiperItem 代表一张轮播卡片，可以通过 `align` 属性可以设置幻灯片对齐方式，默认是从开始位置（`start`）对齐。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper align=\"center\">\n        <SwiperItem style={{ minWidth: '80%' }}>1</SwiperItem>\n        <SwiperItem style={{ minWidth: '80%' }}>2</SwiperItem>\n        <SwiperItem style={{ minWidth: '80%' }}>3</SwiperItem>\n        <SwiperItem style={{ minWidth: '80%' }}>4</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 幻灯片展示个数（2 个）\n\n可以通过 `slideNums` 属性设置可以控制一次滚动一个幻灯片（注意：必须为 `SwiperItem` 设置对应的宽度）。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper slideNums={2}>\n        <SwiperItem style={{ minWidth: '50%' }}>1</SwiperItem>\n        <SwiperItem style={{ minWidth: '50%' }}>2</SwiperItem>\n        <SwiperItem style={{ minWidth: '50%' }}>3</SwiperItem>\n        <SwiperItem style={{ minWidth: '50%' }}>4</SwiperItem>\n        <SwiperItem style={{ minWidth: '50%' }}>5</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 滚动方向（从右到左）\n\n每个 SwiperItem 代表一张轮播卡片，可以通过 `direction` 属性控制幻灯片方向，可选值为从左到右`ltr`和从右到左`rtl`。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper direction=\"rtl\">\n        <SwiperItem>1</SwiperItem>\n        <SwiperItem>2</SwiperItem>\n        <SwiperItem>3</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 缩放效果\n\n每个 SwiperItem 代表一张轮播卡片，可以通过 `scale` 属性设置滚动缩放效果，可通过设置 `SwiperItem` css 样式进行调整边距大小以及动画效果等等。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper scale>\n        <SwiperItem>1</SwiperItem>\n        <SwiperItem>2</SwiperItem>\n        <SwiperItem>3</SwiperItem>\n        <SwiperItem>4</SwiperItem>\n        <SwiperItem>5</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 滚动模式/自定义滑块大小\n\n可以通过 `mode` 属性设置动画模式；可选值为 `slide` 滑动模式和 `scroll` 滚动模式。可直接通过设置 `SwiperItem` 宽度控制滑块大小\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper mode=\"scroll\">\n        <SwiperItem style={{ minWidth: '80%' }}>1</SwiperItem>\n        <SwiperItem style={{ minWidth: '60%' }}>2</SwiperItem>\n        <SwiperItem style={{ minWidth: '90%' }}>3</SwiperItem>\n        <SwiperItem style={{ minWidth: '70%' }}>4</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 进度条\n\n每个 SwiperItem 代表一张轮播卡片，可以通过 `progress` 属性设置进度条。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper progress>\n        <SwiperItem>1</SwiperItem>\n        <SwiperItem>2</SwiperItem>\n        <SwiperItem>3</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 缩略图\n\n每个 SwiperItem 代表一张轮播卡片，可以通过 `thumb` 属性设置显示缩略图，也可通过 `thumbNode` 自定义缩略图内容。\n\n```jsx\nimport { Swiper, SwiperItem } from 'mooli-mobile';\n\nconst thumbNode = () => {\n  return (\n    <div>\n      <span className=\"demo-thumb\" style={{ backgroundColor: '#eb2f96' }}>\n        1\n      </span>\n      <span className=\"demo-thumb\" style={{ backgroundColor: '#faad14' }}>\n        2\n      </span>\n      <span className=\"demo-thumb\" style={{ backgroundColor: '#2f54eb' }}>\n        3\n      </span>\n      <span className=\"demo-thumb\" style={{ backgroundColor: '#eb2f96' }}>\n        4\n      </span>\n      <span className=\"demo-thumb\" style={{ backgroundColor: '#fa541c' }}>\n        5\n      </span>\n      <span className=\"demo-thumb\" style={{ backgroundColor: '#2db7f5' }}>\n        6\n      </span>\n    </div>\n  );\n};\nconst Demo = () => {\n  return (\n    <div className=\"demo-swiper\">\n      <Swiper thumb thumbNode={thumbNode()}>\n        <SwiperItem>1</SwiperItem>\n        <SwiperItem>2</SwiperItem>\n        <SwiperItem>3</SwiperItem>\n        <SwiperItem>4</SwiperItem>\n        <SwiperItem>5</SwiperItem>\n        <SwiperItem>6</SwiperItem>\n      </Swiper>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| mode | 动画模式，可选项： `slide`滑动模式 、`scroll`滚动模式 | _string_ | `slide` |\n| autoPlay | 自动轮播间隔，单位为 ms | _number \\| string_ | `--` |\n| initial | 初始位置索引值 | _number \\| string_ | `0` |\n| loop | 是否开启循环播放 | _boolean_ | `false` |\n| indicator | 是否显示指示器 | _boolean_ | `false` |\n| align | 对齐方式，可选值：`start`、`center`、`end` 、`number` | _string_ | `start` |\n| vertical | 是否为纵向滚动 | _boolean_ | `false` |\n| touchable | 是否可以通过手势滑动 | _boolean_ | `true` |\n| progress | 是否显示滚动进度条 | _boolean_ | `false` |\n| slideNums | 单屏展示幻灯片个数 | _number_ | `1` |\n| direction | 滚动方向，可选值：`ltr`从左到右、`rtl`从右到左 | _number_ | `ltr` |\n| scale | 是否开启缩放 | _boolean_ | `false` |\n| arrow | 是否显示箭头 | _boolean_ | `false` |\n| arrowIcon | 自定义箭头图标 | _string_ | `arrow-left` |\n| thumb | 是否显示缩略图 | _boolean_ | `false` |\n| thumbNode | 自定义缩略图节点 | _node_ | `--` |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### Events\n\n| 事件名   | 说明                 | 回调参数            |\n| -------- | -------------------- | ------------------- |\n| onChange | 每一页轮播结束后触发 | index, 当前页的索引 |\n\n### Swiper 方法\n\n通过 onRef 回调可以获取到 Swiper 实例并调用实例方法，详见基础用法实例。\n\n| 方法名 | 说明 | 参数 | 返回值 |\n| --- | --- | --- | --- |\n| scrollPrev | 切换到上一轮播 | - | - |\n| scrollNext | 切换到下一轮播 | - | - |\n| scrollTo | 切换到指定位置 | _index: number_ | - |\n| scrollProgress | 滚动条进度值 | - | _number_ |\n| slideNodes | 所有滑块的节点 | - | _node[]_ |\n| selectedScrollSnap | 当前选中的索引值 | - | _number_ |\n| containerNode | 父类容器节点 | - | _node_ |\n| clickAllowed | 是否允许点击操作 | - | _boolean_ |\n| canScrollNext | 能否切换到下一个 | - | _boolean_ |\n| canScrollNext | 能否切换到下一个 | - | _boolean_ |\n| on | 内置的绑定事件方法 | - | - |\n| off | 内置的事件解绑方法 | - | - |\n| reInit | 外层元素大小或组件显示状态变化时，可以调用此方法来触发重绘 | - | - |\n| destroy | 销毁实例 | - | - |\n"},2092:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},6681:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='# Tab 标签页\n\n### 基础用法\n\n通过 `value` 绑定当前激活标签对应的索引值，默认情况下启用第一个标签。\n\n```jsx\nimport { Tabs, TabPane } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-tabs">\n      <Tabs value="2">\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2">内容 2</TabPane>\n        <TabPane title="标签 3">内容 3</TabPane>\n        <TabPane title="标签 4">内容 4</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 标签栏滚动\n\n标签数量超过 5 个时，标签栏可以在水平方向上滚动，切换时会自动将当前标签居中。\n\n```jsx\nimport { Tabs, TabPane } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-tabs">\n      <Tabs value="5">\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2">内容 2</TabPane>\n        <TabPane title="标签 3">内容 3</TabPane>\n        <TabPane title="标签 4">内容 4</TabPane>\n        <TabPane title="标签 5">内容 5</TabPane>\n        <TabPane title="标签 6">内容 6</TabPane>\n        <TabPane title="标签 7">内容 7</TabPane>\n        <TabPane title="标签 8">内容 8</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 禁用标签\n\n设置 `disabled` 属性即可禁用标签，如果需要监听禁用标签的点击事件，可以在 `Tabs` 上监听`disabled` 事件。\n\n```jsx\nimport { Tabs, TabPane } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const handleDisabled = (index) => {\n    console.log(`disable index: ${index}`);\n  };\n  return (\n    <div className="demo-tabs">\n      <Tabs value="2" onDisabled={handleDisabled}>\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2" disabled>\n          内容 2\n        </TabPane>\n        <TabPane title="标签 3">内容 3</TabPane>\n        <TabPane title="标签 4">内容 4</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 样式风格\n\n`Tabs` 支持两种样式风格：`line` 和`card`，默认为 `line` 样式，可以通过 `type` 属性切换样式风格。\n\n```jsx\nimport { Tabs, TabPane } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-tabs">\n      <Tabs type="card">\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2">内容 2</TabPane>\n        <TabPane title="标签 3">内容 3</TabPane>\n        <TabPane title="标签 4">内容 4</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 点击事件\n\n可以在 `Tabs` 上绑定 `click` 事件，事件传参为标签对应的标识符和标题。\n\n```jsx\nimport { Tabs, TabPane, Toast } from \'mooli-mobile\';\n\nconst Demo = () => {\n  const handleClick = (index) => {\n    Toast(`当前下标值为：${index}`);\n  };\n  return (\n    <div className="demo-tabs">\n      <Tabs onClick={handleClick}>\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2">内容 2</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 粘性布局\n\n通过 `sticky` 属性可以开启粘性布局，粘性布局下，标签页滚动到顶部时会自动吸顶。\n\n```jsx\nimport { Tabs, TabPane, Toast } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-tabs">\n      <Tabs sticky>\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2">内容 2</TabPane>\n        <TabPane title="标签 3">内容 3</TabPane>\n        <TabPane title="标签 4">内容 4</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自定义标签\n\n通过 `title` 插槽可以自定义标签内容。\n\n```jsx\nimport { Tabs, TabPane, Icon } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-tabs">\n      <Tabs>\n        <TabPane\n          title={\n            <span className="demo-tabpane-title">\n              <Icon name="chat-o" />\n              选项 1\n            </span>\n          }\n        >\n          内容 1\n        </TabPane>\n        <TabPane\n          title={\n            <span className="demo-tabpane-title">\n              <Icon name="user-o" />\n              选项 2\n            </span>\n          }\n        >\n          内容 2\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 切换动画\n\n通过 `animated` 属性可以开启切换标签内容时的转场动画。\n\n```jsx\nimport { Tabs, TabPane } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-tabs">\n      <Tabs animated swipeable>\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2">内容 2</TabPane>\n        <TabPane title="标签 3">内容 3</TabPane>\n        <TabPane title="标签 4">内容 4</TabPane>\n        <TabPane title="标签 5">内容 5</TabPane>\n        <TabPane title="标签 6">内容 6</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 垂直用法\n\n设置 `disabled` 属性，当标签高度超出的父类容器高度时，标签栏可以在垂直方向上滚动，切换时会自动将当前标签居中。\n\n```jsx\nimport { Tabs, TabPane } from \'mooli-mobile\';\n\nconst Demo = () => {\n  return (\n    <div className="demo-tabs" style={{ height: 220 }}>\n      <Tabs direction="vertical" color="#faad14" animated swipeable border>\n        <TabPane title="标签 1">内容 1</TabPane>\n        <TabPane title="标签 2">内容 2</TabPane>\n        <TabPane title="标签 3">内容 3</TabPane>\n        <TabPane title="标签 4">内容 4</TabPane>\n        <TabPane title="标签 5">内容 5</TabPane>\n        <TabPane title="标签 6">内容 6</TabPane>\n        <TabPane title="标签 7">内容 7</TabPane>\n        <TabPane title="标签 8">内容 8</TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### Tabs Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| value | 绑定当前选中标签的标识符 | _number \\| string_ | `0` |\n| defaultValue | 选中的默认值 | _number \\| string_ | `0` |\n| type | 样式风格类型，可选值为 `card` | _string_ | `line` |\n| color | 标签主题色 | _string_ | `#ee0a24` |\n| background | 标签栏背景色 | _string_ | `white` |\n| duration | 动画时间，单位秒 | _number \\| string_ | `0.3` |\n| lineWidth | 底部条宽度，默认单位 `px` | _number \\| string_ | `40px` |\n| lineHeight | 底部条高度，默认单位 `px` | _number \\| string_ | `3px` |\n| lineColor | 底部条主题色 | _string_ | `#ee0a24` |\n| animated | 是否开启切换标签内容时的转场动画 | _boolean_ | `false` |\n| border | 是否显示标签栏外边框，仅在 `type="line"` 时有效 | _boolean_ | `false` |\n| ellipsis | 是否省略过长的标题文字 | _boolean_ | `true` |\n| sticky | 是否使用粘性定位布局 | _boolean_ | `false` |\n| swipeable | 是否开启手势滑动切换 | _boolean_ | `false` |\n| offsetTop | 粘性定位布局下与顶部的最小距离，支持 `px` `vw` `vh` `rem` 单位，默认 `px` | _number \\| string_ | `0` |\n| titleActiveColor | 标题选中态颜色 | _string_ | - |\n| titleInactiveColor | 标题默认态颜色 | _string_ | - |\n\n### Tab Props\n\n| 参数       | 说明                       | 类型               | 默认值       |\n| ---------- | -------------------------- | ------------------ | ------------ |\n| title      | 标题                       | _string_           | -            |\n| disabled   | 是否禁用标签               | _boolean_          | `false`      |\n| dot        | 是否在标题右上角显示小红点 | _boolean_          | `false`      |\n| info       | 图标右上角徽标的内容       | _number \\| string_ | -            |\n| name       | 标签名称，作为匹配的标识符 | _number \\| string_ | 标签的索引值 |\n| titleStyle | 自定义标题样式             | _any_              | -            |\n| titleClass | 自定义标题类名             | _any_              | -            |\n\n### Tabs Events\n\n| 事件名 | 说明 | 回调参数 |\n| --- | --- | --- |\n| onClick | 点击标签时触发 | name：标识符，title：标题 |\n| onChange | 当前激活的标签改变时触发 | name：标识符，title：标题 |\n| onDisabled | 点击被禁用的标签时触发 | name：标识符，title：标题 |\n| onSticktScroll | 滚动时触发，仅在 sticky 模式下生效 | { scrollTop: 距离顶部位置, isFixed: 是否吸顶 } |\n\n### Tab Slots\n\n| 名称    | 说明       |\n| ------- | ---------- |\n| default | 标签页内容 |\n| title   | 自定义标题 |\n'},6034:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},1513:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Image 图片\n\n### 介绍\n\n增强版的 img 标签，提供多种图片填充模式，支持图片懒加载、加载中提示、加载失败提示。\n\n## 代码演示\n\n### 基础用法\n\n基础用法与原生 `img` 标签一致，可以设置 `src`、`width`、`height`、`alt` 等原生属性。\n\n```jsx\nimport { Button } from 'mooli-mobile';\n\nconst Demo = () => {\n  return <div className=\"demo-name\"></div>;\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"},159:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},820:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Toast 轻提示\n\n### 介绍\n\n在页面中间弹出黑色半透明提示，用于消息通知、加载提示、操作结果提示等场景。\n\n```jsx\nimport { Toast, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Toast('文字提示');\n        }}\n      >\n        文字提示\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast.loading({\n            message: '加载提示',\n          });\n        }}\n      >\n        加载提示\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast.success({\n            message: '成功提示',\n            // duration: 0,\n          });\n        }}\n      >\n        成功提示\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast.fail({\n            message: '失败提示',\n          });\n        }}\n      >\n        失败提示\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自定义图标\n\n通过 `icon` 选项可以自定义图标，支持传入[图标名称](#/components/icon/zh-CN)或图片链接，通过`loadingType` 属性可以自定义加载图标类型。\n\n```jsx\nimport { Toast, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Toast({\n            message: '自定义图标',\n            icon: 'like-o',\n            // duration: 0,\n          });\n        }}\n      >\n        自定义图标\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast({\n            message: '自定义图片',\n            icon: 'https://b.yzcdn.cn/vant/logo/weapp.svg',\n          });\n        }}\n      >\n        自定义图片\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast.loading({\n            message: '加载中...',\n            loadingType: 'spinner',\n          });\n        }}\n      >\n        自定义加载图标类型\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 自定义位置\n\nToast 默认渲染在屏幕正中位置，通过 `position` 属性可以控制 Toast 展示的位置。\n\n```jsx\nimport { Toast, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Toast({\n            message: '顶部展示',\n            position: 'top',\n          });\n        }}\n      >\n        顶部展示\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast({\n            message: '底部展示',\n            position: 'bottom',\n          });\n        }}\n      >\n        底部展示\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 修改默认配置\n\n通过 `Toast.setDefaultOptions` 函数可以全局修改 Toast 的默认配置；通过 `Toast.resetDefaultOptions` 函数可以全局重置 Toast 的默认配置。\n\n```jsx\nimport { Toast, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Toast.setDefaultOptions({ duration: 10000 });\n        }}\n      >\n        设置全局所有 Toast 时长10s\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast.resetDefaultOptions();\n        }}\n      >\n        重置所有全局设置\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 其他设置\n\n通过 `forbidClick` 属性可以控制 Toast 是否禁止背景点击。同时可以通过 `duration` 展示时长(ms)，值为 0 时，toast 不会消失。\n\n```jsx\nimport { Toast, Cell } from 'mooli-mobile';\n\nconst Demo = () => {\n  return (\n    <div className=\"demo-popup\">\n      <Cell\n        arrow\n        onClick={() => {\n          Toast({\n            message: '禁止背景点击',\n            forbidClick: true,\n            onClose: () => {\n              console.log('结束时触发');\n            },\n          });\n        }}\n      >\n        禁止背景点击\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast({\n            message: '展示时长4s',\n            closeOnClick: true,\n            duration: 4000,\n          });\n        }}\n      >\n        展示时长4s，点击关闭\n      </Cell>\n      <Cell\n        arrow\n        onClick={() => {\n          Toast.clear();\n        }}\n      >\n        关闭所有 Toast\n      </Cell>\n    </div>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## API\n\n### 方法\n\n| 方法名        | 说明         | 参数                 | 返回值     |\n| ------------- | ------------ | -------------------- | ---------- |\n| Toast         | 展示提示     | `options \\| message` | toast 实例 |\n| Toast.loading | 展示加载提示 | `options \\| message` | toast 实例 |\n| Toast.success | 展示成功提示 | `options \\| message` | toast 实例 |\n| Toast.fail    | 展示失败提示 | `options \\| message` | toast 实例 |\n| Toast.clear   | 关闭所有提示 | `clearAll: boolean`  | `void`     |\n\n### Options\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 提示类型，可选值为 `loading` `success`<br>`fail` `html` | _string_ | `text` |\n| position | 位置，可选值为 `top` `bottom` `center` | _string_ | `center` |\n| message | 文本内容，支持通过`\\n`换行 | _string_ | `--` |\n| icon | 图标名称 | _string_ | `--` |\n| iconSize | 图标大小，如 `20px` `2em`，默认单位为 `px` | _number \\| string_ | `36px` |\n| loadingType | 加载图标类型, 可选值为 `spinner` | _string_ | `circular` |\n| forbidClick | 是否禁止背景点击 | _boolean_ | `false` |\n| closeOnClick | 是否在点击后关闭 | _boolean_ | `false` |\n| duration | 展示时长(ms)，值为 0 时，toast 不会消失 | _number_ | `2000` |\n| transition | 动画属性（可参考 Popup 组件定义） | _string_ | `mooli-fade` |\n| className | 附加类名 | _string_ | `--` |\n| style | 附加样式 | _objcet_ | `--` |\n\n### Events\n\n| 事件名   | 说明           | 回调参数            |\n| -------- | -------------- | ------------------- |\n| onEnter  | 动画开始时触发 | _event: MouseEvent_ |\n| onExited | 动画结束时触发 | _event: MouseEvent_ |\n| onClick  | 点击触发       | _event: MouseEvent_ |\n| onClose  | 关闭时触发     | _event: MouseEvent_ |\n\n### Slots\n\n| 名称    | 说明         |\n| ------- | ------------ |\n| default | message 内容 |\n"},217:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Cell 英文\n\n### 基本用法\n\n通过以下方式来全局注册组件，更多注册方式请参考[组件注册]\n\n```jsx\nimport { Cell } from 'mooli-mobile';\n\nReactDOM.render(\n  <>\n    <Cell onClick={() => console.log(666666)}>default英文</Cell>\n    <Cell theme=\"primary\">primary英文</Cell>\n  </>,\n  mountNode,\n);\n```\n"},4533:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Image 图片\n\n### 介绍\n\n增强版的 img 标签，提供多种图片填充模式，支持图片懒加载、加载中提示、加载失败提示。\n\n## 代码演示\n\n### 基础用法\n\n基础用法与原生 `img` 标签一致，可以设置 `src`、`width`、`height`、`alt` 等原生属性。\n\n```jsx\nimport { Button } from 'mooli-mobile';\n\nconst Demo = () => {\n  return <div className=\"demo-name\"></div>;\n};\n\nReactDOM.render(<Demo />, mountNode);\n```\n"},6626:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Contribution\n\n### Introduce\n\nThank you for use Mooli Mobile。\n\nHere's a guide to submitting feedback or code to mooli mobile. Please take a few minutes to read the following before submitting an issue or PR to mooli mobile.\n\n### Issue standard\n\n- When you encounter a problem, please confirm whether the problem has been recorded in the issue or has been fixed\n- When you mention issue, please describe the problem in a short language, and add the environment and recurrence steps when the problem occurs\n\n## Participation in dev\n\n### Local dev\n\nFollow the steps below to develop the Mooli Mobile component locally。\n\n```bash\n# clone git\ngit clone git@gitee.com:ws18250840411/mooli-mobile.git\n\n# Installation dependency\nnpm install or yarn install\n\n# Enter the development mode, browser access http://localhost:8080\nnpm run start or yarn start\n```\n\n### Directory structure\n\nThe main contents of the project are as follows:\n\n```\nmooli-mobile\n├─ build      # build\n├─ site       # web site\n├─ docs       # documents\n├─ components # components\n├─ test       # testing\n└─ types      # type\n```\n\n### Add new component\n\nWhen adding a new component, please organize the file according to the following directory structure, and configure the component name in `mooli.config.js`。\n\n```\nsrc\n└─ button\n   ├─ test             # test\n   ├─ index.tsx        # input\n   ├─ style            # style\n   ├─ index.en-US.md   # en docs\n   └─ index.zh-CN.md   # zh docs\n```\n\n## Submit PR\n\n### Pull Request standard\n\n- If you have problems, it is recommended to keep your PR small enough. Ensure that a PR solves only one problem or adds only one function\n- When adding new components or modifying the original components, remember to add or modify the test code to ensure the stability of the code\n- In PR, please add an appropriate description and associate the relevant issue\n"},6023:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# 开发指南\n\n### 介绍\n\n感谢你使用 Mooli Mobile。\n\n以下是关于向 Mooli Mobile 提交反馈或代码的指南。在向 Mooli Mobile 提交 issue 或者 PR 之前，请先花几分钟时间阅读以下文字。\n\n### Issue 规范\n\n- 遇到问题时，请先确认这个问题是否已经在 issue 中有记录或者已被修复\n- 提 issue 时，请用简短的语言描述遇到的问题，并添加出现问题时的环境和复现步骤\n\n## 参与开发\n\n### 本地开发\n\n按照下面的步骤操作，即可在本地开发 Mooli Mobile 组件。\n\n```bash\n# 克隆仓库\ngit clone git@gitee.com:ws18250840411/mooli-mobile.git\n\n# 安装依赖\nnpm install 或者 yarn install\n\n# 进入开发模式，浏览器访问 http://localhost:8080\nnpm run start 或者 yarn start\n```\n\n### 目录结构\n\n- 仓库的组件代码位于 src 下，每个组件一个文件夹\n- docs 目录下是文档网站的代码，本地开发时可以在目录下运行 npm run start 开启文档网站\n\n项目主要目录如下：\n\n```\nmooli-mobile\n├─ build      # 构建\n├─ site       # 静态站点\n├─ docs       # 文档\n├─ components # 组件\n├─ test       # 单测\n└─ types      # 类型\n```\n\n### 添加新组件\n\n添加新组件时，请按照下面的目录结构组织文件，并在 `mooli.config.js` 中配置组件名称。\n\n```\ncomponents\n└─ button\n   ├─ test             # 单元测试\n   ├─ index.tsx        # 组件入口\n   ├─ style            # 组件样式\n   ├─ index.en-US.md   # 英文文档\n   └─ index.zh-CN.md   # 中文文档\n```\n\n## 提交 PR\n\n### Pull Request 规范\n\n- 如果遇到问题，建议保持你的 PR 足够小。保证一个 PR 只解决一个问题或只添加一个功能\n- 当新增组件或者修改原有组件时，记得增加或者修改测试代码，保证代码的稳定\n- 在 PR 中请添加合适的描述，并关联相关的 Issue\n"},508:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='<div style="margin: 60px;text-align: center;font-size: 48px; color: #0d1a26;font-weight: 500;">Mooli Design Mobile</div>\n\n### Features\n\n- 🌈 提炼自企业级中后台产品的交互语言和视觉风格。\n- 📦 开箱即用的高质量 React 组件。\n- 🛡 使用 TypeScript 开发，提供完整的类型定义文件。\n- ⚙️ 全链路开发和设计工具体系。\n- 🌍 数十个国际化语言支持。\n- 🎨 深入每个细节的主题定制能力。\n\n### 📦 Install\n\n```bash\nnpm install mooli-mobile --save\n```\n\n```bash\nyarn add mooli-mobile\n```\n\n### 🔨 Uso\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nconst App = () => (\n  <>\n    <Button type="primary">PRESS ME</Button>\n  </>\n);\n```\n\n### Demo\n\n<img width="250" src="https://zos.alipayobjects.com/rmsportal/dLMGiKuyFLBfYfm.png" />\n\n### Browser Support\n\n- `iOS`\n- `Android 4.0+`\n'},286:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='<div style="margin: 60px;text-align: center;font-size: 48px; color: #0d1a26;font-weight: 500;">Mooli Design Mobile</div>\n\n### 特性\n\n- 🌈 提炼自企业级中后台产品的交互语言和视觉风格。\n- 📦 开箱即用的高质量 React 组件。\n- 🛡 使用 TypeScript 开发，提供完整的类型定义文件。\n- ⚙️ 全链路开发和设计工具体系。\n- 🌍 数十个国际化语言支持。\n- 🎨 深入每个细节的主题定制能力。\n\n### 📦 安装\n\n```bash\nnpm install mooli-mobile --save\n```\n\n```bash\nyarn add mooli-mobile\n```\n\n### 🔨 示例\n\n```jsx\nimport { Button } from \'mooli-mobile\';\n\nconst App = () => (\n  <>\n    <Button type="primary">PRESS ME</Button>\n  </>\n);\n```\n\n### 演示\n\n<img width="250" src="https://zos.alipayobjects.com/rmsportal/dLMGiKuyFLBfYfm.png" />\n\n### 浏览器支持\n\n- `iOS`\n- `Android 4.0+`\n'},2970:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='<div class="card">\n  <div>\n    <img  style="width: 120px; height: 120px;" src="https://portrait.gitee.com/uploads/avatars/user/498/1494603_ws18250840411_1619316633.png!avatar200">\n    <h2 style="margin: 0; font-size: 36px; line-height: 60px;">Mooli Mobile</h2>\n    <p>Mobile UI Components built on  React</p>\n  </div>\n</div>\n\n### Introduce\n\nMooli Mobile It is an open source component library for mobile terminals, which carries all the core businesses of youzan internally and serves more than 100000 developers externally. It is one of the mainstream component libraries for mobile terminals in the industry。 <br><br>\n\n### Features\n\n- 65+ Reusable components\n- 1kb Component average size (min+gzip)\n- 90%+ Unit test coverage\n- Extensive documentation and demos\n- Support Tree Shaking\n- Support Custom Theme\n- Support i18n\n- Support TS\n- Support SSR\n\n### 快速上手\n\nSee in [Quickstart](#/components/quick-start/zh-CN)。\n\n### Contribution\n\nTo modify the code, please read our [contribution](#/components/contribution/zh-CN)。\n\nAny problem found in the process of use can be raised [Issue](https://gitee.com/ws18250840411/mooli-mobile/issues) for us。\n\n### Browser Support\n\nMooli Mobile supports modern browsers and Android >= 4.0、iOS >= 8.0。\n\n### LICENSE\n\n[MIT](https://zh.wikipedia.org/wiki/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89)\n'},4816:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t='<div class="card">\n  <div>\n    <img  style="width: 120px; height: 120px;" src="https://portrait.gitee.com/uploads/avatars/user/498/1494603_ws18250840411_1619316633.png!avatar200">\n    <h2 style="margin: 0; font-size: 36px; line-height: 60px;">Mooli Mobile</h2>\n    <p>轻量、可靠的移动端 React 组件库</p>\n  </div>\n</div>\n\n### 介绍\n\nMooli Mobile 是开源的移动端组件库，对内承载了企业所有核心业务，对外服务所有开发者，是业界主流的移动端组件库之一。 <br><br>\n\n### 特性\n\n- 提供 60 多个高质量组件，覆盖移动端各类场景\n- 性能极佳，组件平均体积不到 1kb（min+gzip）\n- 单元测试覆盖率 90%+，提供稳定性保障\n- 完善的中英文文档和示例\n- 支持按需引入\n- 支持主题定制\n- 支持国际化\n- 支持 TypeScript\n- 支持 SSR\n\n### 快速上手\n\n请参考[快速上手](#/components/quick-start/zh-CN)章节。\n\n### 贡献代码\n\n修改代码请阅读我们的[开发指南](#/components/contribution/zh-CN)。\n\n使用过程中发现任何问题都可以提 [Issue](https://gitee.com/ws18250840411/mooli-mobile/issues) 给我们。\n\n### 浏览器支持\n\nMooli Mobile 支持现代浏览器以及 Android >= 4.0、iOS >= 8.0。\n\n### 开源协议\n\n本项目基于 [MIT](https://zh.wikipedia.org/wiki/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89) 协议，请自由地享受和参与开源\n'},6799:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# Quickstart\n\n## Install\n\n### npm\n\n```bash\nnpm i mooli-mobile -S\n```\n\n## Usage\n\n### 1. Import on demand\n\nUse [babel-plugin-import](https://github.com/ant-design/babel-plugin-import) to import components on demand.\n\n```bash\n# Install plugin\nnpm i babel-plugin-import -D\n```\n\n```js\n// set babel config in .babelrc or babel-loader\n// Note: Don't set libraryDirectory if you are using webpack 1.\n{\n  \"plugins\": [\n    [\"import\", {\n      \"libraryName\": \"mooli-mobile\",\n      \"libraryDirectory\": \"es\",\n      \"style\": true\n    }]\n  ]\n}\n\n// For users who use babel7, that can be configured in babel.config.js\nmodule.exports = {\n  plugins: [\n    ['import', {\n      libraryName: 'mooli-mobile',\n      libraryDirectory: 'es',\n      style: true\n    }, 'mooli-mobile']\n  ]\n};\n```\n\n```js\n// Then you can import components from mooli-mobile\nimport { Button } from 'mooli-mobile';\n```\n\nIf you are using TypeScript，please use [ts-import-plugin](https://github.com/Brooooooklyn/ts-import-plugin) instead.\n\n### 2. Manually import\n\n```js\nimport Button from 'mooli-mobile/lib/button';\nimport 'mooli-mobile/lib/button/style';\n```\n\nIf you configured babel-plugin-import, you won't be allowed to import all components.\n"},3374:(n,e,o)=>{"use strict";o.d(e,{Z:()=>t});const t="# 快速上手\n\n### 介绍\n\n通过本章节你可以了解到 Mooli Mobile 的安装方法和基本使用姿势。\n\n## 安装\n\n### 通过 npm 安装\n\n在现有项目中使用 Mooli Mobile 时，可以通过 `npm` 或 `yarn` 进行安装：\n\n```bash\nnpm i mooli-mobile -S\n```\n\n## 引入组件\n\n### 方式一. 自动按需引入组件 (推荐)\n\n[babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。\n\n```bash\n# 安装插件\nnpm i babel-plugin-import -D\n```\n\n```js\n// 在.babelrc 中添加配置\n// 注意：webpack 1 无需设置 libraryDirectory\n{\n  \"plugins\": [\n    [\"import\", {\n      \"libraryName\": \"mooli-mobile\",\n      \"libraryDirectory\": \"es\",\n      \"style\": true\n    }]\n  ]\n}\n\n// 对于使用 babel7 的用户，可以在 babel.config.js 中配置\nmodule.exports = {\n  plugins: [\n    ['import', {\n      libraryName: 'mooli-mobile',\n      libraryDirectory: 'es',\n      style: true\n    }, 'mooli-mobile']\n  ]\n};\n```\n\n```js\n// 接着你可以在代码中直接引入 Vant 组件\nimport { Button } from 'mooli-mobile';\n```\n\nTips: 如果你在使用 TypeScript，可以使用 [ts-import-plugin](https://github.com/Brooooooklyn/ts-import-plugin) 实现按需引入。\n\n### 方式二. 手动按需引入组件\n\n在不使用插件的情况下，可以手动引入需要的组件。\n\n```js\nimport Button from 'mooli-mobile/lib/button';\nimport 'mooli-mobile/lib/button/style';\n```\n"},9559:n=>{n.exports={name:"mooli-mobile",paths:{componentDir:"components"},site:{defaultLang:"zh-CN",title:"Mooli Mobile",logo:"https://portrait.gitee.com/uploads/avatars/user/498/1494603_ws18250840411_1619316633.png!avatar200",locales:{"zh-CN":{langLabel:"中文",links:[{title:"首页",path:"index"},{title:"组件",path:"quick-start"},{title:"GitHub",path:"https://gitee.com/ws18250840411/mooli-mobile"}],nav:[{title:"首页",hideInSimulator:!0,hideInSide:!0,hideInMenu:!0,items:[{path:"index",title:"首页"}]},{title:"开发指南",hideInSimulator:!0,items:[{path:"introduce",title:"介绍"},{path:"quick-start",title:"快速上手"},{path:"contribution",title:"开发指南"}]},{title:"布局组件",items:[{path:"flex",title:"Flex 布局"},{path:"grid",title:"Grid 宫格"}]},{title:"基础组件",items:[{path:"button",title:"Button 按钮"},{path:"cell",title:"Cell 单元格"},{path:"icon",title:"Icon 图标"},{path:"image",title:"Image 图片"},{path:"popup",title:"Popup 弹出层"},{path:"toast",title:"Toast 轻提示"}]},{title:"表单组件",items:[{path:"form",title:"Form 表单"},{path:"field",title:"Field 输入框"},{path:"uploader",title:"Uploader 文件上传"}]},{title:"反馈组件",items:[{path:"action-sheet",title:"ActionSheet 动作面板"},{path:"loading",title:"Loading 加载"},{path:"pull-refresh",title:"PullRefresh 下拉刷新"},{path:"overlay",title:"Overlay 遮罩层"},{path:"notify",title:"Notify 消息通知"},{path:"dialog",title:"Dialog 弹出框"}]},{title:"展示组件",items:[{path:"popover",title:"Popover 气泡弹出框"},{path:"swiper",title:"Swiper 轮播"},{path:"image-preview",title:"ImagePreview 图片预览"},{path:"list",title:"List 列表"},{path:"tab",title:"Tab 标签页"},{path:"sticky",title:"Sticky 粘性布局"}]}]},"en-US":{langLabel:"EN",links:[{title:"Home",path:"index"},{title:"Components",path:"quick-start"},{title:"GitHub",path:"https://gitee.com/ws18250840411/mooli-mobile"}],nav:[{title:"home",hideInSimulator:!0,hideInSide:!0,hideInMenu:!0,items:[{path:"index",title:"Home"}]},{title:"Essentials",hideInSimulator:!0,items:[{path:"introduce",title:"Introduce"},{path:"quick-start",title:"Quickstart"},{path:"contribution",title:"Contribution"}]},{title:"Layout Components",items:[{path:"flex",title:"Flex"},{path:"grid",title:"Grid"}]},{title:"Basic Components",items:[{path:"button",title:"Button"},{path:"cell",title:"Cell"},{path:"icon",title:"Icon"},{path:"image",title:"Image"},{path:"popup",title:"Popup"},{path:"toast",title:"Toast"}]},{title:"Form Components",items:[{path:"form",title:"Form"},{path:"field",title:"Field"},{path:"uploader",title:"Uploader"}]},{title:"Action Components",items:[{path:"action-sheet",title:"ActionSheet"},{path:"loading",title:"Loading"},{path:"pull-refresh",title:"PullRefresh"},{path:"overlay",title:"Overlay"},{path:"notify",title:"Notify 消息通知"},{path:"dialog",title:"Dialog"}]},{title:"Display Components",items:[{path:"popover",title:"Popover"},{path:"swiper",title:"Swiper"},{path:"image-preview",title:"ImagePreview"},{path:"list",title:"List"},{path:"tab",title:"Tab"},{path:"sticky",title:"Sticky"}]}]}}}}}}]);
//# sourceMappingURL=651.03b3fa4fd1c8.js.map